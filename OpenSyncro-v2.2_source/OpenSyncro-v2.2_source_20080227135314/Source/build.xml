<!-- DOCTYPE project [ ] -->

<project name="opensyncro" basedir="." default="build-standalone">

  <!-- Set the Tomcat installation path to property "tomcat.dir". -->
  <property name="tomcat.dir" value="/usr/local/tomcat5"/>

  <!-- Tomcat library directory path. Change to ${tomcat.dir}/lib for Tomcat 6. -->
  <property name="shared.lib" value="${tomcat.dir}/shared/lib"/>

  <tstamp>
	<format property="timestamp" pattern="yyyyMMddHHmmss"/>
  </tstamp>  
	
  <property name="opensyncro.version" value="2.2"/>

  <property name="dist.dir" value="dist"/>

  <fileset id="jre-lib.jars" dir="${java.home}/lib" includes="*.jar"/>
  <fileset id="jars" dir="lib" includes="*.jar"/>
  <fileset id="tomcat-jars" dir="${shared.lib}" includes="*.jar"/>

  <property name="build.dir" value="build"/>
  <property name="build.classes.dir" value="${build.dir}/classes"/>

  <path id="build.classpath">
    <fileset refid="jars"/>
    <fileset refid="tomcat-jars"/>
    <pathelement location="${build.classes.dir}"/>
  </path>

  <property name="standalone.war" value="opensyncro.war"/>

  <property name="src.dir" value="src"/>
  <property name="lib.dir" value="lib"/>

  <!-- Compiles all the classes -->
  <target name="compile" depends="clean" unless="compiled" description="Compile all the classes">

    <mkdir dir="${build.classes.dir}"/>
     <!-- Compile -->
    <javac srcdir="${src.dir}"
           destdir="${build.classes.dir}">
       
	   <classpath refid="build.classpath"/>
    	
    </javac>

    <!-- Copy the Hibernate mapping files, properties, editor GUI template HTMLs, etc -->
    <copy todir="${build.classes.dir}">
      <fileset dir="${src.dir}">
        <include name="**/*.hbm.xml"/>
	    <include name="**/*.properties"/>
	    <include name="**/defaulttemplates/*.html"/>
      	<exclude name="smilehouse/opensyncro/system/opensyncro.properties"/>
        <include name="smilehouse/opensyncro/system/opensyncro.menu"/>
      </fileset>
    </copy>

  </target>

  <!-- Builds standalone OpenSyncro webapp with built-in default components -->
  <target name="build-standalone" depends="compile" description="Build standalone OpenSyncro web application">
    
    <!-- Uncompress dynApi -->
    <mkdir dir="${build.dir}/dynapi"/>
    <gunzip src="lib/dynapi-2.5.6.tar.gz" dest="${build.dir}/dynapi"/>
    <mkdir dir="${build.dir}/dynapi/unpacked"/>
    <untar src="${build.dir}/dynapi/dynapi-2.5.6.tar" dest="${build.dir}/dynapi/unpacked"/>

    <!-- Create the war -->
  	<mkdir dir="${dist.dir}"/>
    <!-- Copy smilemenu.js to directory dynapi/src/lib to ensure that it is always found -->
    <copy file="files/smilemenu.js" todir="${build.dir}/dynapi/unpacked/dynapi/src/lib"/>
    <war destfile="${dist.dir}/${standalone.war}" webxml="web.xml">
    	
      <fileset dir="files">
        <exclude name="smilemenu.js"/>
      </fileset>
    	
      <fileset dir="${build.dir}/dynapi/unpacked">
        <exclude name="dynapi/docs/**"/>
	    <exclude name="dynapi/examples/**"/>
	    <exclude name="dynapi/tests/**"/>
      </fileset>	

      <classes dir="${build.classes.dir}">
	      <exclude name="smilehouse/conf/**"/>
	  </classes>
	  	
      <lib dir="lib" includes="*.jar"/>
    </war>

  </target>

  <!-- Deletes all generated files -->
  <target name="clean" if="clean" description="Deletes all files generated by the build process">
    <delete dir="${build.dir}"/>
    <delete file="${dist.dir}/${standalone.war}"/>
  </target>

<!-- 
 	   jarComponent target builds one or more dynamic OpenSyncro components. It creates a .jar
  	   file to be placed in the component.dir specified in opensyncro.properties file.
       
       jarComponent requires a component.file parameter, a Java properties file specifying which
       classes and files to include in the .jar package.
       
       See components/filecomponents.properties for an example of component.file. The example
       builds the default filesystem components as external dynamic components. The resulting
       .jar will override the built-in versions of those components.
-->
<target name="jarComponent" description="Builds dynamic OpenSyncro component jar's">
     <antcall target="doComplain"/>
     <antcall target="doJarComponent"/>
</target>
	    
<target name="doComplain" unless="component.file">
	 <fail message="Call me with: ant jarComponent -Dcomponent.file={filename}"/>
</target>
        
 <target name="doJarComponent" if="component.file" depends="compile">   
      <property file="${component.file}"/>
      <mkdir dir="${build.classes.dir}"/>
      <mkdir dir="temp"/>
      
      <!-- Compile -->
      <javac srcdir="${component.src.dir}"
             destdir="${build.classes.dir}"
		     debug="on">
	     <classpath refid="build.classpath"/>
 	     <include name="${component.src.javacbasedir}/${component.src.javacfiles}"/>          
      </javac> 

	  <!-- Move compiled classes to temp directory -->
	  <basename property="component.src.javacfilebasename" file="${component.src.javacfiles}" 
	  			suffix=".java"/>
	  <move todir="temp">
      <fileset dir="${build.classes.dir}">
          <include name="${component.src.javacbasedir}/${component.src.javacfilebasename}*.class"/>
      </fileset>
	  </move>
	
      <!-- Copy properties, etc -->
      <copy todir="temp">
      	<fileset dir="${component.src.dir}">
          <include name="${component.src.copyfilebasedir}/${component.src.copyfiles}"/>
	    </fileset>
	  </copy>

      <copy file="${component.file}" tofile="temp/component.properties"/>

      <mkdir dir="${dist.dir}"/>
 	
      <!-- JAR everything -->
 	  <jar destfile="${dist.dir}/${component.jar.filename}" basedir="temp"/> 
  	  <delete dir="temp"/>
 	      
      <echo message="OpenSyncro dynamic component ready: ${dist.dir}/${component.jar.filename}"/> 

 </target>

</project>
