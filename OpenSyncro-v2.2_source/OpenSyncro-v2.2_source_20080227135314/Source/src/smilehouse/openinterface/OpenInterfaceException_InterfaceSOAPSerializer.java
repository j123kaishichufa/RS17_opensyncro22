/* OpenSyncro - A web-based enterprise application integration tool
 * Copyright (C) 2008 Smilehouse Oy, support@opensyncro.org
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1, build R59)

package smilehouse.openinterface;

import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.literal.DetailFragmentDeserializer;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.soap.SOAPVersion;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;

public class OpenInterfaceException_InterfaceSOAPSerializer extends InterfaceSerializerBase implements Initializable {
    private static final QName ns1_AccessDeniedException_TYPE_QNAME = new QName("http://www.smilehouse.com/types", "AccessDeniedException");
    private CombinedSerializer ns1_myAccessDeniedException_SOAPSerializer;
    private static final QName ns1_IteratorClosedException_TYPE_QNAME = new QName("http://www.smilehouse.com/types", "IteratorClosedException");
    private CombinedSerializer ns1_myIteratorClosedException_SOAPSerializer;
    private CombinedSerializer ns1_myOpenInterfaceException_SOAPSerializer;
    
    public OpenInterfaceException_InterfaceSOAPSerializer(QName type, boolean encodeType, boolean isNullable, String encodingStyle) {
        super(type, encodeType, isNullable, encodingStyle);
    }
    
    public void initialize(InternalTypeMappingRegistry registry) throws Exception {
        ns1_myAccessDeniedException_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.AccessDeniedException.class, ns1_AccessDeniedException_TYPE_QNAME);
        ns1_myAccessDeniedException_SOAPSerializer = ns1_myAccessDeniedException_SOAPSerializer.getInnermostSerializer();
        ns1_myIteratorClosedException_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.IteratorClosedException.class, ns1_IteratorClosedException_TYPE_QNAME);
        ns1_myIteratorClosedException_SOAPSerializer = ns1_myIteratorClosedException_SOAPSerializer.getInnermostSerializer();
        QName type = new QName("http://www.smilehouse.com/types", "OpenInterfaceException");
        CombinedSerializer interfaceSerializer = new smilehouse.openinterface.OpenInterfaceException_SOAPSerializer(type,
            ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
        interfaceSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, interfaceSerializer, SOAPVersion.SOAP_11);
        ns1_myOpenInterfaceException_SOAPSerializer = interfaceSerializer.getInnermostSerializer();
        if (ns1_myOpenInterfaceException_SOAPSerializer instanceof Initializable) {
            ((Initializable)ns1_myOpenInterfaceException_SOAPSerializer).initialize(registry);
        }
    }
    
    public Object doDeserialize(QName name, XMLReader reader,
        SOAPDeserializationContext context) throws Exception {
        QName elementType = getType(reader);
        if (elementType != null && elementType.equals(ns1_myAccessDeniedException_SOAPSerializer.getXmlType())) {
            return ns1_myAccessDeniedException_SOAPSerializer.deserialize(name, reader, context);
        } else if (elementType != null && elementType.equals(ns1_myIteratorClosedException_SOAPSerializer.getXmlType())) {
            return ns1_myIteratorClosedException_SOAPSerializer.deserialize(name, reader, context);
        } else if (elementType == null || elementType.equals(ns1_myOpenInterfaceException_SOAPSerializer.getXmlType())) {
            Object obj = ns1_myOpenInterfaceException_SOAPSerializer.deserialize(name, reader, context);
            while (reader.getState() == XMLReader.START) {
                reader.skipElement();
                reader.nextElementContent();
            }
            return obj;
        }
        throw new DeserializationException("soap.unexpectedElementType", new Object[] {"", elementType.toString()});
    }
    
    public void doSerializeInstance(Object obj, QName name, SerializerCallback callback,
        XMLWriter writer, SOAPSerializationContext context) throws Exception {
        smilehouse.openinterface.OpenInterfaceException instance = (smilehouse.openinterface.OpenInterfaceException)obj;
        
        if (obj instanceof smilehouse.openinterface.AccessDeniedException) {
            ns1_myAccessDeniedException_SOAPSerializer.serialize(obj, name, callback, writer, context);
        } else if (obj instanceof smilehouse.openinterface.IteratorClosedException) {
            ns1_myIteratorClosedException_SOAPSerializer.serialize(obj, name, callback, writer, context);
        } else {
            ns1_myOpenInterfaceException_SOAPSerializer.serialize(obj, name, callback, writer, context);
        }
    }
}
