/* OpenSyncro - A web-based enterprise application integration tool
 * Copyright (C) 2008 Smilehouse Oy, support@opensyncro.org
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1, build R59)

package smilehouse.openinterface;

import com.sun.xml.rpc.server.http.MessageContextProperties;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.encoding.soap.SOAP12Constants;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.soap.streaming.*;
import com.sun.xml.rpc.soap.message.*;
import com.sun.xml.rpc.soap.SOAPVersion;
import com.sun.xml.rpc.soap.SOAPEncodingConstants;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;
import java.rmi.RemoteException;
import java.util.Iterator;
import java.lang.reflect.*;
import java.lang.Class;
import com.sun.xml.rpc.client.SenderException;
import com.sun.xml.rpc.client.*;
import com.sun.xml.rpc.client.http.*;
import javax.xml.rpc.handler.*;
import javax.xml.rpc.JAXRPCException;
import javax.xml.rpc.soap.SOAPFaultException;

public class OpenInterfaceIF_Stub
    extends com.sun.xml.rpc.client.StubBase
    implements smilehouse.openinterface.OpenInterfaceIF {
    
    
    /*
     *  public constructor
     */
    public OpenInterfaceIF_Stub(HandlerChain handlerChain) {
        super(handlerChain);
        _setProperty(ENDPOINT_ADDRESS_PROPERTY, "REPLACE_WITH_ACTUAL_URL");
    }
    
    
    /*
     *  implementation of importCustomers
     */
    public smilehouse.openinterface.ImportResult importCustomers(smilehouse.openinterface.LoginInfo loginInfo_1, java.lang.String string_2, int int_3, boolean boolean_4)
        throws smilehouse.openinterface.AccessDeniedException, smilehouse.openinterface.OpenInterfaceException, java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(importCustomers_OPCODE);
            smilehouse.openinterface.OpenInterfaceIF_importCustomers_RequestStruct _myOpenInterfaceIF_importCustomers_RequestStruct =
                new smilehouse.openinterface.OpenInterfaceIF_importCustomers_RequestStruct();
            
            _myOpenInterfaceIF_importCustomers_RequestStruct.setLoginInfo_1(loginInfo_1);
            _myOpenInterfaceIF_importCustomers_RequestStruct.setString_2(string_2);
            _myOpenInterfaceIF_importCustomers_RequestStruct.setInt_3(int_3);
            _myOpenInterfaceIF_importCustomers_RequestStruct.setBoolean_4(boolean_4);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_importCustomers_importCustomers_QNAME);
            _bodyBlock.setValue(_myOpenInterfaceIF_importCustomers_RequestStruct);
            _bodyBlock.setSerializer(ns1_myOpenInterfaceIF_importCustomers_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            smilehouse.openinterface.OpenInterfaceIF_importCustomers_ResponseStruct _myOpenInterfaceIF_importCustomers_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myOpenInterfaceIF_importCustomers_ResponseStruct =
                    (smilehouse.openinterface.OpenInterfaceIF_importCustomers_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myOpenInterfaceIF_importCustomers_ResponseStruct =
                    (smilehouse.openinterface.OpenInterfaceIF_importCustomers_ResponseStruct)_responseObj;
            }
            
            return _myOpenInterfaceIF_importCustomers_ResponseStruct.getResult();
        } catch (smilehouse.openinterface.AccessDeniedException e) {
            throw e;
        } catch (smilehouse.openinterface.OpenInterfaceException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of exportOrders2
     */
    public smilehouse.openinterface.ExportResult exportOrders2(smilehouse.openinterface.LoginInfo loginInfo_1, smilehouse.openinterface.OrderCriteria orderCriteria_2, java.lang.String string_3)
        throws smilehouse.openinterface.AccessDeniedException, smilehouse.openinterface.OpenInterfaceException, java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(exportOrders2_OPCODE);
            smilehouse.openinterface.OpenInterfaceIF_exportOrders2_RequestStruct _myOpenInterfaceIF_exportOrders2_RequestStruct =
                new smilehouse.openinterface.OpenInterfaceIF_exportOrders2_RequestStruct();
            
            _myOpenInterfaceIF_exportOrders2_RequestStruct.setLoginInfo_1(loginInfo_1);
            _myOpenInterfaceIF_exportOrders2_RequestStruct.setOrderCriteria_2(orderCriteria_2);
            _myOpenInterfaceIF_exportOrders2_RequestStruct.setString_3(string_3);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_exportOrders2_exportOrders2_QNAME);
            _bodyBlock.setValue(_myOpenInterfaceIF_exportOrders2_RequestStruct);
            _bodyBlock.setSerializer(ns1_myOpenInterfaceIF_exportOrders2_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            smilehouse.openinterface.OpenInterfaceIF_exportOrders2_ResponseStruct _myOpenInterfaceIF_exportOrders2_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myOpenInterfaceIF_exportOrders2_ResponseStruct =
                    (smilehouse.openinterface.OpenInterfaceIF_exportOrders2_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myOpenInterfaceIF_exportOrders2_ResponseStruct =
                    (smilehouse.openinterface.OpenInterfaceIF_exportOrders2_ResponseStruct)_responseObj;
            }
            
            return _myOpenInterfaceIF_exportOrders2_ResponseStruct.getResult();
        } catch (smilehouse.openinterface.AccessDeniedException e) {
            throw e;
        } catch (smilehouse.openinterface.OpenInterfaceException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of importProducts2
     */
    public smilehouse.openinterface.ImportResult importProducts2(smilehouse.openinterface.LoginInfo loginInfo_1, java.lang.String string_2, int int_3, boolean boolean_4, boolean boolean_5, java.lang.String[] arrayOfString_6, boolean boolean_7)
        throws smilehouse.openinterface.OpenInterfaceException, smilehouse.openinterface.AccessDeniedException, java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(importProducts2_OPCODE);
            smilehouse.openinterface.OpenInterfaceIF_importProducts2_RequestStruct _myOpenInterfaceIF_importProducts2_RequestStruct =
                new smilehouse.openinterface.OpenInterfaceIF_importProducts2_RequestStruct();
            
            _myOpenInterfaceIF_importProducts2_RequestStruct.setLoginInfo_1(loginInfo_1);
            _myOpenInterfaceIF_importProducts2_RequestStruct.setString_2(string_2);
            _myOpenInterfaceIF_importProducts2_RequestStruct.setInt_3(int_3);
            _myOpenInterfaceIF_importProducts2_RequestStruct.setBoolean_4(boolean_4);
            _myOpenInterfaceIF_importProducts2_RequestStruct.setBoolean_5(boolean_5);
            _myOpenInterfaceIF_importProducts2_RequestStruct.setArrayOfString_6(arrayOfString_6);
            _myOpenInterfaceIF_importProducts2_RequestStruct.setBoolean_7(boolean_7);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_importProducts2_importProducts2_QNAME);
            _bodyBlock.setValue(_myOpenInterfaceIF_importProducts2_RequestStruct);
            _bodyBlock.setSerializer(ns1_myOpenInterfaceIF_importProducts2_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            smilehouse.openinterface.OpenInterfaceIF_importProducts2_ResponseStruct _myOpenInterfaceIF_importProducts2_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myOpenInterfaceIF_importProducts2_ResponseStruct =
                    (smilehouse.openinterface.OpenInterfaceIF_importProducts2_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myOpenInterfaceIF_importProducts2_ResponseStruct =
                    (smilehouse.openinterface.OpenInterfaceIF_importProducts2_ResponseStruct)_responseObj;
            }
            
            return _myOpenInterfaceIF_importProducts2_ResponseStruct.getResult();
        } catch (smilehouse.openinterface.AccessDeniedException e) {
            throw e;
        } catch (smilehouse.openinterface.OpenInterfaceException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of importProducts
     */
    public smilehouse.openinterface.ImportResult importProducts(smilehouse.openinterface.LoginInfo loginInfo_1, java.lang.String string_2, int int_3, java.lang.String[] arrayOfString_4, boolean boolean_5, boolean boolean_6)
        throws smilehouse.openinterface.OpenInterfaceException, smilehouse.openinterface.AccessDeniedException, java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(importProducts_OPCODE);
            smilehouse.openinterface.OpenInterfaceIF_importProducts_RequestStruct _myOpenInterfaceIF_importProducts_RequestStruct =
                new smilehouse.openinterface.OpenInterfaceIF_importProducts_RequestStruct();
            
            _myOpenInterfaceIF_importProducts_RequestStruct.setLoginInfo_1(loginInfo_1);
            _myOpenInterfaceIF_importProducts_RequestStruct.setString_2(string_2);
            _myOpenInterfaceIF_importProducts_RequestStruct.setInt_3(int_3);
            _myOpenInterfaceIF_importProducts_RequestStruct.setArrayOfString_4(arrayOfString_4);
            _myOpenInterfaceIF_importProducts_RequestStruct.setBoolean_5(boolean_5);
            _myOpenInterfaceIF_importProducts_RequestStruct.setBoolean_6(boolean_6);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_importProducts_importProducts_QNAME);
            _bodyBlock.setValue(_myOpenInterfaceIF_importProducts_RequestStruct);
            _bodyBlock.setSerializer(ns1_myOpenInterfaceIF_importProducts_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            smilehouse.openinterface.OpenInterfaceIF_importProducts_ResponseStruct _myOpenInterfaceIF_importProducts_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myOpenInterfaceIF_importProducts_ResponseStruct =
                    (smilehouse.openinterface.OpenInterfaceIF_importProducts_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myOpenInterfaceIF_importProducts_ResponseStruct =
                    (smilehouse.openinterface.OpenInterfaceIF_importProducts_ResponseStruct)_responseObj;
            }
            
            return _myOpenInterfaceIF_importProducts_ResponseStruct.getResult();
        } catch (smilehouse.openinterface.AccessDeniedException e) {
            throw e;
        } catch (smilehouse.openinterface.OpenInterfaceException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of invokeEvent
     */
    public void invokeEvent(smilehouse.openinterface.LoginInfo loginInfo_1, java.lang.String string_2, java.lang.Object object_3)
        throws smilehouse.openinterface.AccessDeniedException, smilehouse.openinterface.OpenInterfaceException, java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(invokeEvent_OPCODE);
            smilehouse.openinterface.OpenInterfaceIF_invokeEvent_RequestStruct _myOpenInterfaceIF_invokeEvent_RequestStruct =
                new smilehouse.openinterface.OpenInterfaceIF_invokeEvent_RequestStruct();
            
            _myOpenInterfaceIF_invokeEvent_RequestStruct.setLoginInfo_1(loginInfo_1);
            _myOpenInterfaceIF_invokeEvent_RequestStruct.setString_2(string_2);
            _myOpenInterfaceIF_invokeEvent_RequestStruct.setObject_3(object_3);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_invokeEvent_invokeEvent_QNAME);
            _bodyBlock.setValue(_myOpenInterfaceIF_invokeEvent_RequestStruct);
            _bodyBlock.setSerializer(ns1_myOpenInterfaceIF_invokeEvent_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            smilehouse.openinterface.OpenInterfaceIF_invokeEvent_ResponseStruct _myOpenInterfaceIF_invokeEvent_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myOpenInterfaceIF_invokeEvent_ResponseStruct =
                    (smilehouse.openinterface.OpenInterfaceIF_invokeEvent_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myOpenInterfaceIF_invokeEvent_ResponseStruct =
                    (smilehouse.openinterface.OpenInterfaceIF_invokeEvent_ResponseStruct)_responseObj;
            }
            
        } catch (smilehouse.openinterface.AccessDeniedException e) {
            throw e;
        } catch (smilehouse.openinterface.OpenInterfaceException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of exportCustomers
     */
    public smilehouse.openinterface.ExportResult exportCustomers(smilehouse.openinterface.LoginInfo loginInfo_1, smilehouse.openinterface.CustomerCriteria customerCriteria_2)
        throws smilehouse.openinterface.OpenInterfaceException, smilehouse.openinterface.AccessDeniedException, java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(exportCustomers_OPCODE);
            smilehouse.openinterface.OpenInterfaceIF_exportCustomers_RequestStruct _myOpenInterfaceIF_exportCustomers_RequestStruct =
                new smilehouse.openinterface.OpenInterfaceIF_exportCustomers_RequestStruct();
            
            _myOpenInterfaceIF_exportCustomers_RequestStruct.setLoginInfo_1(loginInfo_1);
            _myOpenInterfaceIF_exportCustomers_RequestStruct.setCustomerCriteria_2(customerCriteria_2);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_exportCustomers_exportCustomers_QNAME);
            _bodyBlock.setValue(_myOpenInterfaceIF_exportCustomers_RequestStruct);
            _bodyBlock.setSerializer(ns1_myOpenInterfaceIF_exportCustomers_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            smilehouse.openinterface.OpenInterfaceIF_exportCustomers_ResponseStruct _myOpenInterfaceIF_exportCustomers_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myOpenInterfaceIF_exportCustomers_ResponseStruct =
                    (smilehouse.openinterface.OpenInterfaceIF_exportCustomers_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myOpenInterfaceIF_exportCustomers_ResponseStruct =
                    (smilehouse.openinterface.OpenInterfaceIF_exportCustomers_ResponseStruct)_responseObj;
            }
            
            return _myOpenInterfaceIF_exportCustomers_ResponseStruct.getResult();
        } catch (smilehouse.openinterface.AccessDeniedException e) {
            throw e;
        } catch (smilehouse.openinterface.OpenInterfaceException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of exportOrderXML
     */
    public smilehouse.openinterface.ExportResult exportOrderXML(java.lang.String string_1, java.lang.String string_2, java.lang.String string_3, smilehouse.openinterface.OrderCriteria orderCriteria_4, java.lang.Long long_5)
        throws smilehouse.openinterface.AccessDeniedException, smilehouse.openinterface.OpenInterfaceException, java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(exportOrderXML_OPCODE);
            smilehouse.openinterface.OpenInterfaceIF_exportOrderXML_RequestStruct _myOpenInterfaceIF_exportOrderXML_RequestStruct =
                new smilehouse.openinterface.OpenInterfaceIF_exportOrderXML_RequestStruct();
            
            _myOpenInterfaceIF_exportOrderXML_RequestStruct.setString_1(string_1);
            _myOpenInterfaceIF_exportOrderXML_RequestStruct.setString_2(string_2);
            _myOpenInterfaceIF_exportOrderXML_RequestStruct.setString_3(string_3);
            _myOpenInterfaceIF_exportOrderXML_RequestStruct.setOrderCriteria_4(orderCriteria_4);
            _myOpenInterfaceIF_exportOrderXML_RequestStruct.setLong_5(long_5);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_exportOrderXML_exportOrderXML_QNAME);
            _bodyBlock.setValue(_myOpenInterfaceIF_exportOrderXML_RequestStruct);
            _bodyBlock.setSerializer(ns1_myOpenInterfaceIF_exportOrderXML_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            smilehouse.openinterface.OpenInterfaceIF_exportOrderXML_ResponseStruct _myOpenInterfaceIF_exportOrderXML_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myOpenInterfaceIF_exportOrderXML_ResponseStruct =
                    (smilehouse.openinterface.OpenInterfaceIF_exportOrderXML_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myOpenInterfaceIF_exportOrderXML_ResponseStruct =
                    (smilehouse.openinterface.OpenInterfaceIF_exportOrderXML_ResponseStruct)_responseObj;
            }
            
            return _myOpenInterfaceIF_exportOrderXML_ResponseStruct.getResult();
        } catch (smilehouse.openinterface.AccessDeniedException e) {
            throw e;
        } catch (smilehouse.openinterface.OpenInterfaceException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of importPricelist
     */
    public smilehouse.openinterface.ImportResult importPricelist(smilehouse.openinterface.LoginInfo loginInfo_1, java.lang.String string_2, int int_3)
        throws smilehouse.openinterface.OpenInterfaceException, smilehouse.openinterface.AccessDeniedException, java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(importPricelist_OPCODE);
            smilehouse.openinterface.OpenInterfaceIF_importPricelist_RequestStruct _myOpenInterfaceIF_importPricelist_RequestStruct =
                new smilehouse.openinterface.OpenInterfaceIF_importPricelist_RequestStruct();
            
            _myOpenInterfaceIF_importPricelist_RequestStruct.setLoginInfo_1(loginInfo_1);
            _myOpenInterfaceIF_importPricelist_RequestStruct.setString_2(string_2);
            _myOpenInterfaceIF_importPricelist_RequestStruct.setInt_3(int_3);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_importPricelist_importPricelist_QNAME);
            _bodyBlock.setValue(_myOpenInterfaceIF_importPricelist_RequestStruct);
            _bodyBlock.setSerializer(ns1_myOpenInterfaceIF_importPricelist_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            smilehouse.openinterface.OpenInterfaceIF_importPricelist_ResponseStruct _myOpenInterfaceIF_importPricelist_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myOpenInterfaceIF_importPricelist_ResponseStruct =
                    (smilehouse.openinterface.OpenInterfaceIF_importPricelist_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myOpenInterfaceIF_importPricelist_ResponseStruct =
                    (smilehouse.openinterface.OpenInterfaceIF_importPricelist_ResponseStruct)_responseObj;
            }
            
            return _myOpenInterfaceIF_importPricelist_ResponseStruct.getResult();
        } catch (smilehouse.openinterface.AccessDeniedException e) {
            throw e;
        } catch (smilehouse.openinterface.OpenInterfaceException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of openHQLIterator
     */
    public java.lang.String openHQLIterator(smilehouse.openinterface.LoginInfo loginInfo_1, java.lang.String string_2, long long_3)
        throws smilehouse.openinterface.AccessDeniedException, smilehouse.openinterface.OpenInterfaceException, java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(openHQLIterator_OPCODE);
            smilehouse.openinterface.OpenInterfaceIF_openHQLIterator_RequestStruct _myOpenInterfaceIF_openHQLIterator_RequestStruct =
                new smilehouse.openinterface.OpenInterfaceIF_openHQLIterator_RequestStruct();
            
            _myOpenInterfaceIF_openHQLIterator_RequestStruct.setLoginInfo_1(loginInfo_1);
            _myOpenInterfaceIF_openHQLIterator_RequestStruct.setString_2(string_2);
            _myOpenInterfaceIF_openHQLIterator_RequestStruct.setLong_3(long_3);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_openHQLIterator_openHQLIterator_QNAME);
            _bodyBlock.setValue(_myOpenInterfaceIF_openHQLIterator_RequestStruct);
            _bodyBlock.setSerializer(ns1_myOpenInterfaceIF_openHQLIterator_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            smilehouse.openinterface.OpenInterfaceIF_openHQLIterator_ResponseStruct _myOpenInterfaceIF_openHQLIterator_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myOpenInterfaceIF_openHQLIterator_ResponseStruct =
                    (smilehouse.openinterface.OpenInterfaceIF_openHQLIterator_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myOpenInterfaceIF_openHQLIterator_ResponseStruct =
                    (smilehouse.openinterface.OpenInterfaceIF_openHQLIterator_ResponseStruct)_responseObj;
            }
            
            return _myOpenInterfaceIF_openHQLIterator_ResponseStruct.getResult();
        } catch (smilehouse.openinterface.AccessDeniedException e) {
            throw e;
        } catch (smilehouse.openinterface.OpenInterfaceException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of importOrders
     */
    public smilehouse.openinterface.ImportResult importOrders(smilehouse.openinterface.LoginInfo loginInfo_1, java.lang.String string_2, int int_3, boolean boolean_4, boolean boolean_5, boolean boolean_6)
        throws smilehouse.openinterface.AccessDeniedException, smilehouse.openinterface.OpenInterfaceException, java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(importOrders_OPCODE);
            smilehouse.openinterface.OpenInterfaceIF_importOrders_RequestStruct _myOpenInterfaceIF_importOrders_RequestStruct =
                new smilehouse.openinterface.OpenInterfaceIF_importOrders_RequestStruct();
            
            _myOpenInterfaceIF_importOrders_RequestStruct.setLoginInfo_1(loginInfo_1);
            _myOpenInterfaceIF_importOrders_RequestStruct.setString_2(string_2);
            _myOpenInterfaceIF_importOrders_RequestStruct.setInt_3(int_3);
            _myOpenInterfaceIF_importOrders_RequestStruct.setBoolean_4(boolean_4);
            _myOpenInterfaceIF_importOrders_RequestStruct.setBoolean_5(boolean_5);
            _myOpenInterfaceIF_importOrders_RequestStruct.setBoolean_6(boolean_6);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_importOrders_importOrders_QNAME);
            _bodyBlock.setValue(_myOpenInterfaceIF_importOrders_RequestStruct);
            _bodyBlock.setSerializer(ns1_myOpenInterfaceIF_importOrders_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            smilehouse.openinterface.OpenInterfaceIF_importOrders_ResponseStruct _myOpenInterfaceIF_importOrders_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myOpenInterfaceIF_importOrders_ResponseStruct =
                    (smilehouse.openinterface.OpenInterfaceIF_importOrders_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myOpenInterfaceIF_importOrders_ResponseStruct =
                    (smilehouse.openinterface.OpenInterfaceIF_importOrders_ResponseStruct)_responseObj;
            }
            
            return _myOpenInterfaceIF_importOrders_ResponseStruct.getResult();
        } catch (smilehouse.openinterface.AccessDeniedException e) {
            throw e;
        } catch (smilehouse.openinterface.OpenInterfaceException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getVersion
     */
    public double getVersion()
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getVersion_OPCODE);
            smilehouse.openinterface.OpenInterfaceIF_getVersion_RequestStruct _myOpenInterfaceIF_getVersion_RequestStruct =
                new smilehouse.openinterface.OpenInterfaceIF_getVersion_RequestStruct();
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getVersion_getVersion_QNAME);
            _bodyBlock.setValue(_myOpenInterfaceIF_getVersion_RequestStruct);
            _bodyBlock.setSerializer(ns1_myOpenInterfaceIF_getVersion_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            smilehouse.openinterface.OpenInterfaceIF_getVersion_ResponseStruct _myOpenInterfaceIF_getVersion_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myOpenInterfaceIF_getVersion_ResponseStruct =
                    (smilehouse.openinterface.OpenInterfaceIF_getVersion_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myOpenInterfaceIF_getVersion_ResponseStruct =
                    (smilehouse.openinterface.OpenInterfaceIF_getVersion_ResponseStruct)_responseObj;
            }
            
            return _myOpenInterfaceIF_getVersion_ResponseStruct.getResult();
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of exportOrders
     */
    public smilehouse.openinterface.ExportResult exportOrders(smilehouse.openinterface.LoginInfo loginInfo_1, smilehouse.openinterface.OrderCriteria orderCriteria_2, java.lang.Long long_3, java.lang.String string_4)
        throws smilehouse.openinterface.OpenInterfaceException, smilehouse.openinterface.AccessDeniedException, java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(exportOrders_OPCODE);
            smilehouse.openinterface.OpenInterfaceIF_exportOrders_RequestStruct _myOpenInterfaceIF_exportOrders_RequestStruct =
                new smilehouse.openinterface.OpenInterfaceIF_exportOrders_RequestStruct();
            
            _myOpenInterfaceIF_exportOrders_RequestStruct.setLoginInfo_1(loginInfo_1);
            _myOpenInterfaceIF_exportOrders_RequestStruct.setOrderCriteria_2(orderCriteria_2);
            _myOpenInterfaceIF_exportOrders_RequestStruct.setLong_3(long_3);
            _myOpenInterfaceIF_exportOrders_RequestStruct.setString_4(string_4);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_exportOrders_exportOrders_QNAME);
            _bodyBlock.setValue(_myOpenInterfaceIF_exportOrders_RequestStruct);
            _bodyBlock.setSerializer(ns1_myOpenInterfaceIF_exportOrders_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            smilehouse.openinterface.OpenInterfaceIF_exportOrders_ResponseStruct _myOpenInterfaceIF_exportOrders_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myOpenInterfaceIF_exportOrders_ResponseStruct =
                    (smilehouse.openinterface.OpenInterfaceIF_exportOrders_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myOpenInterfaceIF_exportOrders_ResponseStruct =
                    (smilehouse.openinterface.OpenInterfaceIF_exportOrders_ResponseStruct)_responseObj;
            }
            
            return _myOpenInterfaceIF_exportOrders_ResponseStruct.getResult();
        } catch (smilehouse.openinterface.AccessDeniedException e) {
            throw e;
        } catch (smilehouse.openinterface.OpenInterfaceException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of closeIterator
     */
    public void closeIterator(smilehouse.openinterface.LoginInfo loginInfo_1, java.lang.String string_2)
        throws smilehouse.openinterface.OpenInterfaceException, smilehouse.openinterface.AccessDeniedException, java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(closeIterator_OPCODE);
            smilehouse.openinterface.OpenInterfaceIF_closeIterator_RequestStruct _myOpenInterfaceIF_closeIterator_RequestStruct =
                new smilehouse.openinterface.OpenInterfaceIF_closeIterator_RequestStruct();
            
            _myOpenInterfaceIF_closeIterator_RequestStruct.setLoginInfo_1(loginInfo_1);
            _myOpenInterfaceIF_closeIterator_RequestStruct.setString_2(string_2);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_closeIterator_closeIterator_QNAME);
            _bodyBlock.setValue(_myOpenInterfaceIF_closeIterator_RequestStruct);
            _bodyBlock.setSerializer(ns1_myOpenInterfaceIF_closeIterator_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            smilehouse.openinterface.OpenInterfaceIF_closeIterator_ResponseStruct _myOpenInterfaceIF_closeIterator_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myOpenInterfaceIF_closeIterator_ResponseStruct =
                    (smilehouse.openinterface.OpenInterfaceIF_closeIterator_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myOpenInterfaceIF_closeIterator_ResponseStruct =
                    (smilehouse.openinterface.OpenInterfaceIF_closeIterator_ResponseStruct)_responseObj;
            }
            
        } catch (smilehouse.openinterface.AccessDeniedException e) {
            throw e;
        } catch (smilehouse.openinterface.OpenInterfaceException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of iterate
     */
    public smilehouse.openinterface.ExportResult iterate(smilehouse.openinterface.LoginInfo loginInfo_1, java.lang.String string_2, int int_3)
        throws smilehouse.openinterface.OpenInterfaceException, smilehouse.openinterface.AccessDeniedException, smilehouse.openinterface.IteratorClosedException, java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(iterate_OPCODE);
            smilehouse.openinterface.OpenInterfaceIF_iterate_RequestStruct _myOpenInterfaceIF_iterate_RequestStruct =
                new smilehouse.openinterface.OpenInterfaceIF_iterate_RequestStruct();
            
            _myOpenInterfaceIF_iterate_RequestStruct.setLoginInfo_1(loginInfo_1);
            _myOpenInterfaceIF_iterate_RequestStruct.setString_2(string_2);
            _myOpenInterfaceIF_iterate_RequestStruct.setInt_3(int_3);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_iterate_iterate_QNAME);
            _bodyBlock.setValue(_myOpenInterfaceIF_iterate_RequestStruct);
            _bodyBlock.setSerializer(ns1_myOpenInterfaceIF_iterate_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            smilehouse.openinterface.OpenInterfaceIF_iterate_ResponseStruct _myOpenInterfaceIF_iterate_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myOpenInterfaceIF_iterate_ResponseStruct =
                    (smilehouse.openinterface.OpenInterfaceIF_iterate_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myOpenInterfaceIF_iterate_ResponseStruct =
                    (smilehouse.openinterface.OpenInterfaceIF_iterate_ResponseStruct)_responseObj;
            }
            
            return _myOpenInterfaceIF_iterate_ResponseStruct.getResult();
        } catch (smilehouse.openinterface.AccessDeniedException e) {
            throw e;
        } catch (smilehouse.openinterface.IteratorClosedException e) {
            throw e;
        } catch (smilehouse.openinterface.OpenInterfaceException e) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof com.sun.xml.rpc.util.HeaderFaultException) {
                com.sun.xml.rpc.util.HeaderFaultException hfe = (com.sun.xml.rpc.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    
    /*
     *  this method deserializes the request/response structure in the body
     */
    protected void _readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState  state) throws Exception {
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case importCustomers_OPCODE:
                _deserialize_importCustomers(bodyReader, deserializationContext, state);
                break;
            case exportOrders2_OPCODE:
                _deserialize_exportOrders2(bodyReader, deserializationContext, state);
                break;
            case importProducts2_OPCODE:
                _deserialize_importProducts2(bodyReader, deserializationContext, state);
                break;
            case importProducts_OPCODE:
                _deserialize_importProducts(bodyReader, deserializationContext, state);
                break;
            case invokeEvent_OPCODE:
                _deserialize_invokeEvent(bodyReader, deserializationContext, state);
                break;
            case exportCustomers_OPCODE:
                _deserialize_exportCustomers(bodyReader, deserializationContext, state);
                break;
            case exportOrderXML_OPCODE:
                _deserialize_exportOrderXML(bodyReader, deserializationContext, state);
                break;
            case importPricelist_OPCODE:
                _deserialize_importPricelist(bodyReader, deserializationContext, state);
                break;
            case openHQLIterator_OPCODE:
                _deserialize_openHQLIterator(bodyReader, deserializationContext, state);
                break;
            case importOrders_OPCODE:
                _deserialize_importOrders(bodyReader, deserializationContext, state);
                break;
            case getVersion_OPCODE:
                _deserialize_getVersion(bodyReader, deserializationContext, state);
                break;
            case exportOrders_OPCODE:
                _deserialize_exportOrders(bodyReader, deserializationContext, state);
                break;
            case closeIterator_OPCODE:
                _deserialize_closeIterator(bodyReader, deserializationContext, state);
                break;
            case iterate_OPCODE:
                _deserialize_iterate(bodyReader, deserializationContext, state);
                break;
            default:
                throw new SenderException("sender.response.unrecognizedOperation", Integer.toString(opcode));
        }
    }
    
    
    
    /*
     * This method deserializes the body of the importCustomers operation.
     */
    private void _deserialize_importCustomers(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myOpenInterfaceIF_importCustomers_ResponseStructObj =
            ns1_myOpenInterfaceIF_importCustomers_ResponseStruct_SOAPSerializer.deserialize(ns1_importCustomers_importCustomersResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_importCustomers_importCustomersResponse_QNAME);
        bodyBlock.setValue(myOpenInterfaceIF_importCustomers_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the exportOrders2 operation.
     */
    private void _deserialize_exportOrders2(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myOpenInterfaceIF_exportOrders2_ResponseStructObj =
            ns1_myOpenInterfaceIF_exportOrders2_ResponseStruct_SOAPSerializer.deserialize(ns1_exportOrders2_exportOrders2Response_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_exportOrders2_exportOrders2Response_QNAME);
        bodyBlock.setValue(myOpenInterfaceIF_exportOrders2_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the importProducts2 operation.
     */
    private void _deserialize_importProducts2(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myOpenInterfaceIF_importProducts2_ResponseStructObj =
            ns1_myOpenInterfaceIF_importProducts2_ResponseStruct_SOAPSerializer.deserialize(ns1_importProducts2_importProducts2Response_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_importProducts2_importProducts2Response_QNAME);
        bodyBlock.setValue(myOpenInterfaceIF_importProducts2_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the importProducts operation.
     */
    private void _deserialize_importProducts(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myOpenInterfaceIF_importProducts_ResponseStructObj =
            ns1_myOpenInterfaceIF_importProducts_ResponseStruct_SOAPSerializer.deserialize(ns1_importProducts_importProductsResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_importProducts_importProductsResponse_QNAME);
        bodyBlock.setValue(myOpenInterfaceIF_importProducts_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the invokeEvent operation.
     */
    private void _deserialize_invokeEvent(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myOpenInterfaceIF_invokeEvent_ResponseStructObj =
            ns1_myOpenInterfaceIF_invokeEvent_ResponseStruct_SOAPSerializer.deserialize(ns1_invokeEvent_invokeEventResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_invokeEvent_invokeEventResponse_QNAME);
        bodyBlock.setValue(myOpenInterfaceIF_invokeEvent_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the exportCustomers operation.
     */
    private void _deserialize_exportCustomers(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myOpenInterfaceIF_exportCustomers_ResponseStructObj =
            ns1_myOpenInterfaceIF_exportCustomers_ResponseStruct_SOAPSerializer.deserialize(ns1_exportCustomers_exportCustomersResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_exportCustomers_exportCustomersResponse_QNAME);
        bodyBlock.setValue(myOpenInterfaceIF_exportCustomers_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the exportOrderXML operation.
     */
    private void _deserialize_exportOrderXML(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myOpenInterfaceIF_exportOrderXML_ResponseStructObj =
            ns1_myOpenInterfaceIF_exportOrderXML_ResponseStruct_SOAPSerializer.deserialize(ns1_exportOrderXML_exportOrderXMLResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_exportOrderXML_exportOrderXMLResponse_QNAME);
        bodyBlock.setValue(myOpenInterfaceIF_exportOrderXML_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the importPricelist operation.
     */
    private void _deserialize_importPricelist(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myOpenInterfaceIF_importPricelist_ResponseStructObj =
            ns1_myOpenInterfaceIF_importPricelist_ResponseStruct_SOAPSerializer.deserialize(ns1_importPricelist_importPricelistResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_importPricelist_importPricelistResponse_QNAME);
        bodyBlock.setValue(myOpenInterfaceIF_importPricelist_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the openHQLIterator operation.
     */
    private void _deserialize_openHQLIterator(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myOpenInterfaceIF_openHQLIterator_ResponseStructObj =
            ns1_myOpenInterfaceIF_openHQLIterator_ResponseStruct_SOAPSerializer.deserialize(ns1_openHQLIterator_openHQLIteratorResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_openHQLIterator_openHQLIteratorResponse_QNAME);
        bodyBlock.setValue(myOpenInterfaceIF_openHQLIterator_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the importOrders operation.
     */
    private void _deserialize_importOrders(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myOpenInterfaceIF_importOrders_ResponseStructObj =
            ns1_myOpenInterfaceIF_importOrders_ResponseStruct_SOAPSerializer.deserialize(ns1_importOrders_importOrdersResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_importOrders_importOrdersResponse_QNAME);
        bodyBlock.setValue(myOpenInterfaceIF_importOrders_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getVersion operation.
     */
    private void _deserialize_getVersion(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myOpenInterfaceIF_getVersion_ResponseStructObj =
            ns1_myOpenInterfaceIF_getVersion_ResponseStruct_SOAPSerializer.deserialize(ns1_getVersion_getVersionResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getVersion_getVersionResponse_QNAME);
        bodyBlock.setValue(myOpenInterfaceIF_getVersion_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the exportOrders operation.
     */
    private void _deserialize_exportOrders(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myOpenInterfaceIF_exportOrders_ResponseStructObj =
            ns1_myOpenInterfaceIF_exportOrders_ResponseStruct_SOAPSerializer.deserialize(ns1_exportOrders_exportOrdersResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_exportOrders_exportOrdersResponse_QNAME);
        bodyBlock.setValue(myOpenInterfaceIF_exportOrders_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the closeIterator operation.
     */
    private void _deserialize_closeIterator(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myOpenInterfaceIF_closeIterator_ResponseStructObj =
            ns1_myOpenInterfaceIF_closeIterator_ResponseStruct_SOAPSerializer.deserialize(ns1_closeIterator_closeIteratorResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_closeIterator_closeIteratorResponse_QNAME);
        bodyBlock.setValue(myOpenInterfaceIF_closeIterator_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the iterate operation.
     */
    private void _deserialize_iterate(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myOpenInterfaceIF_iterate_ResponseStructObj =
            ns1_myOpenInterfaceIF_iterate_ResponseStruct_SOAPSerializer.deserialize(ns1_iterate_iterateResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_iterate_iterateResponse_QNAME);
        bodyBlock.setValue(myOpenInterfaceIF_iterate_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     *  this method deserializes fault responses
     */
    protected Object _readBodyFaultElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object faultInfo = null;
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case importCustomers_OPCODE:
                faultInfo = myOpenInterfaceIF_importCustomers_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case exportOrders2_OPCODE:
                faultInfo = myOpenInterfaceIF_exportOrders2_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case importProducts2_OPCODE:
                faultInfo = myOpenInterfaceIF_importProducts2_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case importProducts_OPCODE:
                faultInfo = myOpenInterfaceIF_importProducts_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case invokeEvent_OPCODE:
                faultInfo = myOpenInterfaceIF_invokeEvent_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case exportCustomers_OPCODE:
                faultInfo = myOpenInterfaceIF_exportCustomers_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case exportOrderXML_OPCODE:
                faultInfo = myOpenInterfaceIF_exportOrderXML_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case importPricelist_OPCODE:
                faultInfo = myOpenInterfaceIF_importPricelist_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case openHQLIterator_OPCODE:
                faultInfo = myOpenInterfaceIF_openHQLIterator_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case importOrders_OPCODE:
                faultInfo = myOpenInterfaceIF_importOrders_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case exportOrders_OPCODE:
                faultInfo = myOpenInterfaceIF_exportOrders_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case closeIterator_OPCODE:
                faultInfo = myOpenInterfaceIF_closeIterator_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case iterate_OPCODE:
                faultInfo = myOpenInterfaceIF_iterate_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            default:
                return super._readBodyFaultElement(bodyReader, deserializationContext, state);
        }
        return faultInfo;
    }
    
    
    public String _getDefaultEnvelopeEncodingStyle() {
        return SOAPNamespaceConstants.ENCODING;
    }
    
    public String _getImplicitEnvelopeEncodingStyle() {
        return "";
    }
    
    public String _getEncodingStyle() {
        return SOAPNamespaceConstants.ENCODING;
    }
    
    public void _setEncodingStyle(String encodingStyle) {
        throw new UnsupportedOperationException("cannot set encoding style");
    }
    
    
    
    
    
    /*
     * This method returns an array containing (prefix, nsURI) pairs.
     */
    protected String[] _getNamespaceDeclarations() {
        return myNamespace_declarations;
    }
    
    /*
     * This method returns an array containing the names of the headers we understand.
     */
    public QName[] _getUnderstoodHeaders() {
        return understoodHeaderNames;
    }
    
    public void _initialize(InternalTypeMappingRegistry registry) throws Exception {
        super._initialize(registry);
        ns1_myOpenInterfaceIF_exportCustomers_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.OpenInterfaceIF_exportCustomers_ResponseStruct.class, ns1_exportCustomersResponse_TYPE_QNAME);
        ns1_myOpenInterfaceIF_invokeEvent_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.OpenInterfaceIF_invokeEvent_ResponseStruct.class, ns1_invokeEventResponse_TYPE_QNAME);
        ns1_myOpenInterfaceIF_importOrders_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.OpenInterfaceIF_importOrders_RequestStruct.class, ns1_importOrders_TYPE_QNAME);
        ns1_myOpenInterfaceIF_openHQLIterator_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.OpenInterfaceIF_openHQLIterator_RequestStruct.class, ns1_openHQLIterator_TYPE_QNAME);
        ns1_myOpenInterfaceIF_exportOrderXML_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.OpenInterfaceIF_exportOrderXML_RequestStruct.class, ns1_exportOrderXML_TYPE_QNAME);
        ns1_myOpenInterfaceIF_closeIterator_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.OpenInterfaceIF_closeIterator_RequestStruct.class, ns1_closeIterator_TYPE_QNAME);
        ns1_myOpenInterfaceIF_importProducts_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.OpenInterfaceIF_importProducts_RequestStruct.class, ns1_importProducts_TYPE_QNAME);
        ns1_myOpenInterfaceIF_exportOrders_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.OpenInterfaceIF_exportOrders_ResponseStruct.class, ns1_exportOrdersResponse_TYPE_QNAME);
        ns1_myOpenInterfaceIF_importProducts2_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.OpenInterfaceIF_importProducts2_RequestStruct.class, ns1_importProducts2_TYPE_QNAME);
        ns1_myOpenInterfaceIF_getVersion_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.OpenInterfaceIF_getVersion_RequestStruct.class, ns1_getVersion_TYPE_QNAME);
        ns1_myOpenInterfaceIF_openHQLIterator_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.OpenInterfaceIF_openHQLIterator_ResponseStruct.class, ns1_openHQLIteratorResponse_TYPE_QNAME);
        ns1_myOpenInterfaceIF_importOrders_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.OpenInterfaceIF_importOrders_ResponseStruct.class, ns1_importOrdersResponse_TYPE_QNAME);
        ns1_myOpenInterfaceIF_invokeEvent_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.OpenInterfaceIF_invokeEvent_RequestStruct.class, ns1_invokeEvent_TYPE_QNAME);
        ns1_myOpenInterfaceIF_exportOrders_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.OpenInterfaceIF_exportOrders_RequestStruct.class, ns1_exportOrders_TYPE_QNAME);
        ns1_myOpenInterfaceIF_exportOrders2_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.OpenInterfaceIF_exportOrders2_RequestStruct.class, ns1_exportOrders2_TYPE_QNAME);
        ns1_myOpenInterfaceIF_importCustomers_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.OpenInterfaceIF_importCustomers_ResponseStruct.class, ns1_importCustomersResponse_TYPE_QNAME);
        ns1_myOpenInterfaceIF_importProducts2_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.OpenInterfaceIF_importProducts2_ResponseStruct.class, ns1_importProducts2Response_TYPE_QNAME);
        ns1_myOpenInterfaceIF_getVersion_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.OpenInterfaceIF_getVersion_ResponseStruct.class, ns1_getVersionResponse_TYPE_QNAME);
        ns1_myOpenInterfaceIF_importProducts_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.OpenInterfaceIF_importProducts_ResponseStruct.class, ns1_importProductsResponse_TYPE_QNAME);
        ns1_myOpenInterfaceIF_iterate_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.OpenInterfaceIF_iterate_ResponseStruct.class, ns1_iterateResponse_TYPE_QNAME);
        ns1_myOpenInterfaceIF_exportOrders2_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.OpenInterfaceIF_exportOrders2_ResponseStruct.class, ns1_exportOrders2Response_TYPE_QNAME);
        ns1_myOpenInterfaceIF_importPricelist_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.OpenInterfaceIF_importPricelist_ResponseStruct.class, ns1_importPricelistResponse_TYPE_QNAME);
        ns1_myOpenInterfaceIF_exportOrderXML_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.OpenInterfaceIF_exportOrderXML_ResponseStruct.class, ns1_exportOrderXMLResponse_TYPE_QNAME);
        ns1_myOpenInterfaceIF_iterate_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.OpenInterfaceIF_iterate_RequestStruct.class, ns1_iterate_TYPE_QNAME);
        ns1_myOpenInterfaceIF_exportCustomers_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.OpenInterfaceIF_exportCustomers_RequestStruct.class, ns1_exportCustomers_TYPE_QNAME);
        ns1_myOpenInterfaceIF_importCustomers_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.OpenInterfaceIF_importCustomers_RequestStruct.class, ns1_importCustomers_TYPE_QNAME);
        ns1_myOpenInterfaceIF_closeIterator_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.OpenInterfaceIF_closeIterator_ResponseStruct.class, ns1_closeIteratorResponse_TYPE_QNAME);
        ns1_myOpenInterfaceIF_importPricelist_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.OpenInterfaceIF_importPricelist_RequestStruct.class, ns1_importPricelist_TYPE_QNAME);
        ((Initializable)myOpenInterfaceIF_importCustomers_Fault_SOAPSerializer).initialize(registry);
        ((Initializable)myOpenInterfaceIF_exportOrders2_Fault_SOAPSerializer).initialize(registry);
        ((Initializable)myOpenInterfaceIF_importProducts2_Fault_SOAPSerializer).initialize(registry);
        ((Initializable)myOpenInterfaceIF_importProducts_Fault_SOAPSerializer).initialize(registry);
        ((Initializable)myOpenInterfaceIF_invokeEvent_Fault_SOAPSerializer).initialize(registry);
        ((Initializable)myOpenInterfaceIF_exportCustomers_Fault_SOAPSerializer).initialize(registry);
        ((Initializable)myOpenInterfaceIF_exportOrderXML_Fault_SOAPSerializer).initialize(registry);
        ((Initializable)myOpenInterfaceIF_importPricelist_Fault_SOAPSerializer).initialize(registry);
        ((Initializable)myOpenInterfaceIF_openHQLIterator_Fault_SOAPSerializer).initialize(registry);
        ((Initializable)myOpenInterfaceIF_importOrders_Fault_SOAPSerializer).initialize(registry);
        ((Initializable)myOpenInterfaceIF_exportOrders_Fault_SOAPSerializer).initialize(registry);
        ((Initializable)myOpenInterfaceIF_closeIterator_Fault_SOAPSerializer).initialize(registry);
        ((Initializable)myOpenInterfaceIF_iterate_Fault_SOAPSerializer).initialize(registry);
    }
    
    private static final QName _portName = new QName("http://www.smilehouse.com/wsdl", "OpenInterfaceIFPort");
    private static final int importCustomers_OPCODE = 0;
    private static final int exportOrders2_OPCODE = 1;
    private static final int importProducts2_OPCODE = 2;
    private static final int importProducts_OPCODE = 3;
    private static final int invokeEvent_OPCODE = 4;
    private static final int exportCustomers_OPCODE = 5;
    private static final int exportOrderXML_OPCODE = 6;
    private static final int importPricelist_OPCODE = 7;
    private static final int openHQLIterator_OPCODE = 8;
    private static final int importOrders_OPCODE = 9;
    private static final int getVersion_OPCODE = 10;
    private static final int exportOrders_OPCODE = 11;
    private static final int closeIterator_OPCODE = 12;
    private static final int iterate_OPCODE = 13;
    private final CombinedSerializer myOpenInterfaceIF_importCustomers_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
        new smilehouse.openinterface.OpenInterfaceIF_importCustomers_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myOpenInterfaceIF_exportOrders2_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
        new smilehouse.openinterface.OpenInterfaceIF_exportOrders2_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myOpenInterfaceIF_importProducts2_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
        new smilehouse.openinterface.OpenInterfaceIF_importProducts2_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myOpenInterfaceIF_importProducts_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
        new smilehouse.openinterface.OpenInterfaceIF_importProducts_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myOpenInterfaceIF_invokeEvent_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
        new smilehouse.openinterface.OpenInterfaceIF_invokeEvent_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myOpenInterfaceIF_exportCustomers_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
        new smilehouse.openinterface.OpenInterfaceIF_exportCustomers_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myOpenInterfaceIF_exportOrderXML_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
        new smilehouse.openinterface.OpenInterfaceIF_exportOrderXML_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myOpenInterfaceIF_importPricelist_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
        new smilehouse.openinterface.OpenInterfaceIF_importPricelist_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myOpenInterfaceIF_openHQLIterator_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
        new smilehouse.openinterface.OpenInterfaceIF_openHQLIterator_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myOpenInterfaceIF_importOrders_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
        new smilehouse.openinterface.OpenInterfaceIF_importOrders_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myOpenInterfaceIF_exportOrders_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
        new smilehouse.openinterface.OpenInterfaceIF_exportOrders_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myOpenInterfaceIF_closeIterator_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
        new smilehouse.openinterface.OpenInterfaceIF_closeIterator_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private final CombinedSerializer myOpenInterfaceIF_iterate_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
        new smilehouse.openinterface.OpenInterfaceIF_iterate_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE));
    private static final QName ns1_importCustomers_importCustomers_QNAME = new QName("http://www.smilehouse.com/wsdl", "importCustomers");
    private static final QName ns1_importCustomers_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "importCustomers");
    private CombinedSerializer ns1_myOpenInterfaceIF_importCustomers_RequestStruct_SOAPSerializer;
    private static final QName ns1_importCustomers_importCustomersResponse_QNAME = new QName("http://www.smilehouse.com/wsdl", "importCustomersResponse");
    private static final QName ns1_importCustomersResponse_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "importCustomersResponse");
    private CombinedSerializer ns1_myOpenInterfaceIF_importCustomers_ResponseStruct_SOAPSerializer;
    private static final QName ns1_exportOrders2_exportOrders2_QNAME = new QName("http://www.smilehouse.com/wsdl", "exportOrders2");
    private static final QName ns1_exportOrders2_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "exportOrders2");
    private CombinedSerializer ns1_myOpenInterfaceIF_exportOrders2_RequestStruct_SOAPSerializer;
    private static final QName ns1_exportOrders2_exportOrders2Response_QNAME = new QName("http://www.smilehouse.com/wsdl", "exportOrders2Response");
    private static final QName ns1_exportOrders2Response_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "exportOrders2Response");
    private CombinedSerializer ns1_myOpenInterfaceIF_exportOrders2_ResponseStruct_SOAPSerializer;
    private static final QName ns1_importProducts2_importProducts2_QNAME = new QName("http://www.smilehouse.com/wsdl", "importProducts2");
    private static final QName ns1_importProducts2_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "importProducts2");
    private CombinedSerializer ns1_myOpenInterfaceIF_importProducts2_RequestStruct_SOAPSerializer;
    private static final QName ns1_importProducts2_importProducts2Response_QNAME = new QName("http://www.smilehouse.com/wsdl", "importProducts2Response");
    private static final QName ns1_importProducts2Response_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "importProducts2Response");
    private CombinedSerializer ns1_myOpenInterfaceIF_importProducts2_ResponseStruct_SOAPSerializer;
    private static final QName ns1_importProducts_importProducts_QNAME = new QName("http://www.smilehouse.com/wsdl", "importProducts");
    private static final QName ns1_importProducts_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "importProducts");
    private CombinedSerializer ns1_myOpenInterfaceIF_importProducts_RequestStruct_SOAPSerializer;
    private static final QName ns1_importProducts_importProductsResponse_QNAME = new QName("http://www.smilehouse.com/wsdl", "importProductsResponse");
    private static final QName ns1_importProductsResponse_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "importProductsResponse");
    private CombinedSerializer ns1_myOpenInterfaceIF_importProducts_ResponseStruct_SOAPSerializer;
    private static final QName ns1_invokeEvent_invokeEvent_QNAME = new QName("http://www.smilehouse.com/wsdl", "invokeEvent");
    private static final QName ns1_invokeEvent_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "invokeEvent");
    private CombinedSerializer ns1_myOpenInterfaceIF_invokeEvent_RequestStruct_SOAPSerializer;
    private static final QName ns1_invokeEvent_invokeEventResponse_QNAME = new QName("http://www.smilehouse.com/wsdl", "invokeEventResponse");
    private static final QName ns1_invokeEventResponse_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "invokeEventResponse");
    private CombinedSerializer ns1_myOpenInterfaceIF_invokeEvent_ResponseStruct_SOAPSerializer;
    private static final QName ns1_exportCustomers_exportCustomers_QNAME = new QName("http://www.smilehouse.com/wsdl", "exportCustomers");
    private static final QName ns1_exportCustomers_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "exportCustomers");
    private CombinedSerializer ns1_myOpenInterfaceIF_exportCustomers_RequestStruct_SOAPSerializer;
    private static final QName ns1_exportCustomers_exportCustomersResponse_QNAME = new QName("http://www.smilehouse.com/wsdl", "exportCustomersResponse");
    private static final QName ns1_exportCustomersResponse_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "exportCustomersResponse");
    private CombinedSerializer ns1_myOpenInterfaceIF_exportCustomers_ResponseStruct_SOAPSerializer;
    private static final QName ns1_exportOrderXML_exportOrderXML_QNAME = new QName("http://www.smilehouse.com/wsdl", "exportOrderXML");
    private static final QName ns1_exportOrderXML_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "exportOrderXML");
    private CombinedSerializer ns1_myOpenInterfaceIF_exportOrderXML_RequestStruct_SOAPSerializer;
    private static final QName ns1_exportOrderXML_exportOrderXMLResponse_QNAME = new QName("http://www.smilehouse.com/wsdl", "exportOrderXMLResponse");
    private static final QName ns1_exportOrderXMLResponse_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "exportOrderXMLResponse");
    private CombinedSerializer ns1_myOpenInterfaceIF_exportOrderXML_ResponseStruct_SOAPSerializer;
    private static final QName ns1_importPricelist_importPricelist_QNAME = new QName("http://www.smilehouse.com/wsdl", "importPricelist");
    private static final QName ns1_importPricelist_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "importPricelist");
    private CombinedSerializer ns1_myOpenInterfaceIF_importPricelist_RequestStruct_SOAPSerializer;
    private static final QName ns1_importPricelist_importPricelistResponse_QNAME = new QName("http://www.smilehouse.com/wsdl", "importPricelistResponse");
    private static final QName ns1_importPricelistResponse_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "importPricelistResponse");
    private CombinedSerializer ns1_myOpenInterfaceIF_importPricelist_ResponseStruct_SOAPSerializer;
    private static final QName ns1_openHQLIterator_openHQLIterator_QNAME = new QName("http://www.smilehouse.com/wsdl", "openHQLIterator");
    private static final QName ns1_openHQLIterator_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "openHQLIterator");
    private CombinedSerializer ns1_myOpenInterfaceIF_openHQLIterator_RequestStruct_SOAPSerializer;
    private static final QName ns1_openHQLIterator_openHQLIteratorResponse_QNAME = new QName("http://www.smilehouse.com/wsdl", "openHQLIteratorResponse");
    private static final QName ns1_openHQLIteratorResponse_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "openHQLIteratorResponse");
    private CombinedSerializer ns1_myOpenInterfaceIF_openHQLIterator_ResponseStruct_SOAPSerializer;
    private static final QName ns1_importOrders_importOrders_QNAME = new QName("http://www.smilehouse.com/wsdl", "importOrders");
    private static final QName ns1_importOrders_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "importOrders");
    private CombinedSerializer ns1_myOpenInterfaceIF_importOrders_RequestStruct_SOAPSerializer;
    private static final QName ns1_importOrders_importOrdersResponse_QNAME = new QName("http://www.smilehouse.com/wsdl", "importOrdersResponse");
    private static final QName ns1_importOrdersResponse_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "importOrdersResponse");
    private CombinedSerializer ns1_myOpenInterfaceIF_importOrders_ResponseStruct_SOAPSerializer;
    private static final QName ns1_getVersion_getVersion_QNAME = new QName("http://www.smilehouse.com/wsdl", "getVersion");
    private static final QName ns1_getVersion_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "getVersion");
    private CombinedSerializer ns1_myOpenInterfaceIF_getVersion_RequestStruct_SOAPSerializer;
    private static final QName ns1_getVersion_getVersionResponse_QNAME = new QName("http://www.smilehouse.com/wsdl", "getVersionResponse");
    private static final QName ns1_getVersionResponse_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "getVersionResponse");
    private CombinedSerializer ns1_myOpenInterfaceIF_getVersion_ResponseStruct_SOAPSerializer;
    private static final QName ns1_exportOrders_exportOrders_QNAME = new QName("http://www.smilehouse.com/wsdl", "exportOrders");
    private static final QName ns1_exportOrders_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "exportOrders");
    private CombinedSerializer ns1_myOpenInterfaceIF_exportOrders_RequestStruct_SOAPSerializer;
    private static final QName ns1_exportOrders_exportOrdersResponse_QNAME = new QName("http://www.smilehouse.com/wsdl", "exportOrdersResponse");
    private static final QName ns1_exportOrdersResponse_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "exportOrdersResponse");
    private CombinedSerializer ns1_myOpenInterfaceIF_exportOrders_ResponseStruct_SOAPSerializer;
    private static final QName ns1_closeIterator_closeIterator_QNAME = new QName("http://www.smilehouse.com/wsdl", "closeIterator");
    private static final QName ns1_closeIterator_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "closeIterator");
    private CombinedSerializer ns1_myOpenInterfaceIF_closeIterator_RequestStruct_SOAPSerializer;
    private static final QName ns1_closeIterator_closeIteratorResponse_QNAME = new QName("http://www.smilehouse.com/wsdl", "closeIteratorResponse");
    private static final QName ns1_closeIteratorResponse_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "closeIteratorResponse");
    private CombinedSerializer ns1_myOpenInterfaceIF_closeIterator_ResponseStruct_SOAPSerializer;
    private static final QName ns1_iterate_iterate_QNAME = new QName("http://www.smilehouse.com/wsdl", "iterate");
    private static final QName ns1_iterate_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "iterate");
    private CombinedSerializer ns1_myOpenInterfaceIF_iterate_RequestStruct_SOAPSerializer;
    private static final QName ns1_iterate_iterateResponse_QNAME = new QName("http://www.smilehouse.com/wsdl", "iterateResponse");
    private static final QName ns1_iterateResponse_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "iterateResponse");
    private CombinedSerializer ns1_myOpenInterfaceIF_iterate_ResponseStruct_SOAPSerializer;
    private static final String[] myNamespace_declarations =
                                        new String[] {
                                            "ns0", "http://www.smilehouse.com/types",
                                            "ns1", "http://www.smilehouse.com/wsdl",
                                            "ns2", "http://java.sun.com/jax-rpc-ri/internal"
                                        };
    
    private static final QName[] understoodHeaderNames = new QName[] {  };
}
