/* OpenSyncro - A web-based enterprise application integration tool
 * Copyright (C) 2008 Smilehouse Oy, support@opensyncro.org
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1, build R59)

package smilehouse.openinterface;

import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.literal.DetailFragmentDeserializer;
import com.sun.xml.rpc.encoding.simpletype.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.encoding.soap.SOAP12Constants;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;

public class ImportResult_SOAPSerializer extends ObjectSerializerBase implements Initializable {
    private static final QName ns1_insertedIds_QNAME = new QName("", "insertedIds");
    private static final QName ns5_list_TYPE_QNAME = InternalEncodingConstants.QNAME_TYPE_LIST;
    private CombinedSerializer ns5_myns5_list__CollectionInterfaceSerializer;
    private static final QName ns1_removedIds_QNAME = new QName("", "removedIds");
    private static final QName ns1_updatedIds_QNAME = new QName("", "updatedIds");
    private static final QName ns1_warnings_QNAME = new QName("", "warnings");
    private static final int myINSERTEDIDS_INDEX = 0;
    private static final int myREMOVEDIDS_INDEX = 1;
    private static final int myUPDATEDIDS_INDEX = 2;
    private static final int myWARNINGS_INDEX = 3;
    
    public ImportResult_SOAPSerializer(QName type, boolean encodeType, boolean isNullable, String encodingStyle) {
        super(type, encodeType, isNullable, encodingStyle);
    }
    
    public void initialize(InternalTypeMappingRegistry registry) throws Exception {
        ns5_myns5_list__CollectionInterfaceSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, java.util.List.class, ns5_list_TYPE_QNAME);
    }
    
    public Object doDeserialize(SOAPDeserializationState state, XMLReader reader,
        SOAPDeserializationContext context) throws Exception {
        smilehouse.openinterface.ImportResult instance = new smilehouse.openinterface.ImportResult();
        smilehouse.openinterface.ImportResult_SOAPBuilder builder = null;
        Object member;
        boolean isComplete = true;
        QName elementName;
        
        reader.nextElementContent();
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_insertedIds_QNAME)) {
                member = ns5_myns5_list__CollectionInterfaceSerializer.deserialize(ns1_insertedIds_QNAME, reader, context);
                if (member instanceof SOAPDeserializationState) {
                    if (builder == null) {
                        builder = new smilehouse.openinterface.ImportResult_SOAPBuilder();
                    }
                    state = registerWithMemberState(instance, state, member, myINSERTEDIDS_INDEX, builder);
                    isComplete = false;
                } else {
                    instance.setInsertedIds((java.util.List)member);
                }
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_removedIds_QNAME)) {
                member = ns5_myns5_list__CollectionInterfaceSerializer.deserialize(ns1_removedIds_QNAME, reader, context);
                if (member instanceof SOAPDeserializationState) {
                    if (builder == null) {
                        builder = new smilehouse.openinterface.ImportResult_SOAPBuilder();
                    }
                    state = registerWithMemberState(instance, state, member, myREMOVEDIDS_INDEX, builder);
                    isComplete = false;
                } else {
                    instance.setRemovedIds((java.util.List)member);
                }
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_updatedIds_QNAME)) {
                member = ns5_myns5_list__CollectionInterfaceSerializer.deserialize(ns1_updatedIds_QNAME, reader, context);
                if (member instanceof SOAPDeserializationState) {
                    if (builder == null) {
                        builder = new smilehouse.openinterface.ImportResult_SOAPBuilder();
                    }
                    state = registerWithMemberState(instance, state, member, myUPDATEDIDS_INDEX, builder);
                    isComplete = false;
                } else {
                    instance.setUpdatedIds((java.util.List)member);
                }
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_warnings_QNAME)) {
                member = ns5_myns5_list__CollectionInterfaceSerializer.deserialize(ns1_warnings_QNAME, reader, context);
                if (member instanceof SOAPDeserializationState) {
                    if (builder == null) {
                        builder = new smilehouse.openinterface.ImportResult_SOAPBuilder();
                    }
                    state = registerWithMemberState(instance, state, member, myWARNINGS_INDEX, builder);
                    isComplete = false;
                } else {
                    instance.setWarnings((java.util.List)member);
                }
                reader.nextElementContent();
            }
        }
        
        XMLReaderUtil.verifyReaderState(reader, XMLReader.END);
        return (isComplete ? (Object)instance : (Object)state);
    }
    
    public void doSerializeAttributes(Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        smilehouse.openinterface.ImportResult instance = (smilehouse.openinterface.ImportResult)obj;
        
    }
    
    public void doSerializeInstance(Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        smilehouse.openinterface.ImportResult instance = (smilehouse.openinterface.ImportResult)obj;
        
        ns5_myns5_list__CollectionInterfaceSerializer.serialize(instance.getInsertedIds(), ns1_insertedIds_QNAME, null, writer, context);
        ns5_myns5_list__CollectionInterfaceSerializer.serialize(instance.getRemovedIds(), ns1_removedIds_QNAME, null, writer, context);
        ns5_myns5_list__CollectionInterfaceSerializer.serialize(instance.getUpdatedIds(), ns1_updatedIds_QNAME, null, writer, context);
        ns5_myns5_list__CollectionInterfaceSerializer.serialize(instance.getWarnings(), ns1_warnings_QNAME, null, writer, context);
    }
}
