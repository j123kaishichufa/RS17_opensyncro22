/* OpenSyncro - A web-based enterprise application integration tool
 * Copyright (C) 2008 Smilehouse Oy, support@opensyncro.org
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1, build R59)

package smilehouse.openinterface;

import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.literal.DetailFragmentDeserializer;
import com.sun.xml.rpc.encoding.simpletype.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.encoding.soap.SOAP12Constants;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;

public class CustomerCriteria_SOAPSerializer extends ObjectSerializerBase implements Initializable {
    private static final QName ns1_adminModifiedAfter_QNAME = new QName("", "adminModifiedAfter");
    private static final QName ns3_dateTime_TYPE_QNAME = SchemaConstants.QNAME_TYPE_DATE_TIME;
    private CombinedSerializer ns3_myns3_dateTime__java_util_Calendar_DateTimeCalendar_Serializer;
    private static final QName ns1_adminModifiedBefore_QNAME = new QName("", "adminModifiedBefore");
    private static final QName ns1_customerGroup_QNAME = new QName("", "customerGroup");
    private static final QName ns3_string_TYPE_QNAME = SchemaConstants.QNAME_TYPE_STRING;
    private CombinedSerializer ns3_myns3_string__java_lang_String_String_Serializer;
    private static final QName ns1_customerId_QNAME = new QName("", "customerId");
    private static final QName ns1_customerModifiedAfter_QNAME = new QName("", "customerModifiedAfter");
    private static final QName ns1_customerModifiedBefore_QNAME = new QName("", "customerModifiedBefore");
    private static final QName ns1_firstVisitDateAfter_QNAME = new QName("", "firstVisitDateAfter");
    private static final QName ns1_firstVisitDateBefore_QNAME = new QName("", "firstVisitDateBefore");
    private static final QName ns1_idGreaterThan_QNAME = new QName("", "idGreaterThan");
    private static final QName ns1_idIn_QNAME = new QName("", "idIn");
    private static final QName ns2_ArrayOfstring_TYPE_QNAME = new QName("http://www.smilehouse.com/types", "ArrayOfstring");
    private CombinedSerializer ns2_myns2_ArrayOfstring__StringArray_SOAPSerializer1;
    private static final QName ns1_idLessThan_QNAME = new QName("", "idLessThan");
    private static final QName ns1_lastVisitDateAfter_QNAME = new QName("", "lastVisitDateAfter");
    private static final QName ns1_lastVisitDateBefore_QNAME = new QName("", "lastVisitDateBefore");
    private static final QName ns1_modifyOperation_QNAME = new QName("", "modifyOperation");
    private static final QName ns1_primaryCustomerGroup_QNAME = new QName("", "primaryCustomerGroup");
    private static final int myADMINMODIFIEDAFTER_INDEX = 0;
    private static final int myADMINMODIFIEDBEFORE_INDEX = 1;
    private static final int myCUSTOMERGROUP_INDEX = 2;
    private static final int myCUSTOMERID_INDEX = 3;
    private static final int myCUSTOMERMODIFIEDAFTER_INDEX = 4;
    private static final int myCUSTOMERMODIFIEDBEFORE_INDEX = 5;
    private static final int myFIRSTVISITDATEAFTER_INDEX = 6;
    private static final int myFIRSTVISITDATEBEFORE_INDEX = 7;
    private static final int myIDGREATERTHAN_INDEX = 8;
    private static final int myIDIN_INDEX = 9;
    private static final int myIDLESSTHAN_INDEX = 10;
    private static final int myLASTVISITDATEAFTER_INDEX = 11;
    private static final int myLASTVISITDATEBEFORE_INDEX = 12;
    private static final int myMODIFYOPERATION_INDEX = 13;
    private static final int myPRIMARYCUSTOMERGROUP_INDEX = 14;
    
    public CustomerCriteria_SOAPSerializer(QName type, boolean encodeType, boolean isNullable, String encodingStyle) {
        super(type, encodeType, isNullable, encodingStyle);
    }
    
    public void initialize(InternalTypeMappingRegistry registry) throws Exception {
        ns3_myns3_dateTime__java_util_Calendar_DateTimeCalendar_Serializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, java.util.Calendar.class, ns3_dateTime_TYPE_QNAME);
        ns3_myns3_string__java_lang_String_String_Serializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, java.lang.String.class, ns3_string_TYPE_QNAME);
        ns2_myns2_ArrayOfstring__StringArray_SOAPSerializer1 = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, java.lang.String[].class, ns2_ArrayOfstring_TYPE_QNAME);
    }
    
    public Object doDeserialize(SOAPDeserializationState state, XMLReader reader,
        SOAPDeserializationContext context) throws Exception {
        smilehouse.openinterface.CustomerCriteria instance = new smilehouse.openinterface.CustomerCriteria();
        smilehouse.openinterface.CustomerCriteria_SOAPBuilder builder = null;
        Object member;
        boolean isComplete = true;
        QName elementName;
        
        reader.nextElementContent();
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_adminModifiedAfter_QNAME)) {
                member = ns3_myns3_dateTime__java_util_Calendar_DateTimeCalendar_Serializer.deserialize(ns1_adminModifiedAfter_QNAME, reader, context);
                instance.setAdminModifiedAfter((java.util.Calendar)member);
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_adminModifiedBefore_QNAME)) {
                member = ns3_myns3_dateTime__java_util_Calendar_DateTimeCalendar_Serializer.deserialize(ns1_adminModifiedBefore_QNAME, reader, context);
                instance.setAdminModifiedBefore((java.util.Calendar)member);
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_customerGroup_QNAME)) {
                member = ns3_myns3_string__java_lang_String_String_Serializer.deserialize(ns1_customerGroup_QNAME, reader, context);
                if (member instanceof SOAPDeserializationState) {
                    if (builder == null) {
                        builder = new smilehouse.openinterface.CustomerCriteria_SOAPBuilder();
                    }
                    state = registerWithMemberState(instance, state, member, myCUSTOMERGROUP_INDEX, builder);
                    isComplete = false;
                } else {
                    instance.setCustomerGroup((java.lang.String)member);
                }
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_customerId_QNAME)) {
                member = ns3_myns3_string__java_lang_String_String_Serializer.deserialize(ns1_customerId_QNAME, reader, context);
                if (member instanceof SOAPDeserializationState) {
                    if (builder == null) {
                        builder = new smilehouse.openinterface.CustomerCriteria_SOAPBuilder();
                    }
                    state = registerWithMemberState(instance, state, member, myCUSTOMERID_INDEX, builder);
                    isComplete = false;
                } else {
                    instance.setCustomerId((java.lang.String)member);
                }
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_customerModifiedAfter_QNAME)) {
                member = ns3_myns3_dateTime__java_util_Calendar_DateTimeCalendar_Serializer.deserialize(ns1_customerModifiedAfter_QNAME, reader, context);
                instance.setCustomerModifiedAfter((java.util.Calendar)member);
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_customerModifiedBefore_QNAME)) {
                member = ns3_myns3_dateTime__java_util_Calendar_DateTimeCalendar_Serializer.deserialize(ns1_customerModifiedBefore_QNAME, reader, context);
                instance.setCustomerModifiedBefore((java.util.Calendar)member);
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_firstVisitDateAfter_QNAME)) {
                member = ns3_myns3_dateTime__java_util_Calendar_DateTimeCalendar_Serializer.deserialize(ns1_firstVisitDateAfter_QNAME, reader, context);
                instance.setFirstVisitDateAfter((java.util.Calendar)member);
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_firstVisitDateBefore_QNAME)) {
                member = ns3_myns3_dateTime__java_util_Calendar_DateTimeCalendar_Serializer.deserialize(ns1_firstVisitDateBefore_QNAME, reader, context);
                instance.setFirstVisitDateBefore((java.util.Calendar)member);
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_idGreaterThan_QNAME)) {
                member = ns3_myns3_string__java_lang_String_String_Serializer.deserialize(ns1_idGreaterThan_QNAME, reader, context);
                if (member instanceof SOAPDeserializationState) {
                    if (builder == null) {
                        builder = new smilehouse.openinterface.CustomerCriteria_SOAPBuilder();
                    }
                    state = registerWithMemberState(instance, state, member, myIDGREATERTHAN_INDEX, builder);
                    isComplete = false;
                } else {
                    instance.setIdGreaterThan((java.lang.String)member);
                }
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_idIn_QNAME)) {
                member = ns2_myns2_ArrayOfstring__StringArray_SOAPSerializer1.deserialize(ns1_idIn_QNAME, reader, context);
                if (member instanceof SOAPDeserializationState) {
                    if (builder == null) {
                        builder = new smilehouse.openinterface.CustomerCriteria_SOAPBuilder();
                    }
                    state = registerWithMemberState(instance, state, member, myIDIN_INDEX, builder);
                    isComplete = false;
                } else {
                    instance.setIdIn((java.lang.String[])member);
                }
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_idLessThan_QNAME)) {
                member = ns3_myns3_string__java_lang_String_String_Serializer.deserialize(ns1_idLessThan_QNAME, reader, context);
                if (member instanceof SOAPDeserializationState) {
                    if (builder == null) {
                        builder = new smilehouse.openinterface.CustomerCriteria_SOAPBuilder();
                    }
                    state = registerWithMemberState(instance, state, member, myIDLESSTHAN_INDEX, builder);
                    isComplete = false;
                } else {
                    instance.setIdLessThan((java.lang.String)member);
                }
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_lastVisitDateAfter_QNAME)) {
                member = ns3_myns3_dateTime__java_util_Calendar_DateTimeCalendar_Serializer.deserialize(ns1_lastVisitDateAfter_QNAME, reader, context);
                instance.setLastVisitDateAfter((java.util.Calendar)member);
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_lastVisitDateBefore_QNAME)) {
                member = ns3_myns3_dateTime__java_util_Calendar_DateTimeCalendar_Serializer.deserialize(ns1_lastVisitDateBefore_QNAME, reader, context);
                instance.setLastVisitDateBefore((java.util.Calendar)member);
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_modifyOperation_QNAME)) {
                member = ns3_myns3_string__java_lang_String_String_Serializer.deserialize(ns1_modifyOperation_QNAME, reader, context);
                if (member instanceof SOAPDeserializationState) {
                    if (builder == null) {
                        builder = new smilehouse.openinterface.CustomerCriteria_SOAPBuilder();
                    }
                    state = registerWithMemberState(instance, state, member, myMODIFYOPERATION_INDEX, builder);
                    isComplete = false;
                } else {
                    instance.setModifyOperation((java.lang.String)member);
                }
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_primaryCustomerGroup_QNAME)) {
                member = ns3_myns3_string__java_lang_String_String_Serializer.deserialize(ns1_primaryCustomerGroup_QNAME, reader, context);
                if (member instanceof SOAPDeserializationState) {
                    if (builder == null) {
                        builder = new smilehouse.openinterface.CustomerCriteria_SOAPBuilder();
                    }
                    state = registerWithMemberState(instance, state, member, myPRIMARYCUSTOMERGROUP_INDEX, builder);
                    isComplete = false;
                } else {
                    instance.setPrimaryCustomerGroup((java.lang.String)member);
                }
                reader.nextElementContent();
            }
        }
        
        XMLReaderUtil.verifyReaderState(reader, XMLReader.END);
        return (isComplete ? (Object)instance : (Object)state);
    }
    
    public void doSerializeAttributes(Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        smilehouse.openinterface.CustomerCriteria instance = (smilehouse.openinterface.CustomerCriteria)obj;
        
    }
    
    public void doSerializeInstance(Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        smilehouse.openinterface.CustomerCriteria instance = (smilehouse.openinterface.CustomerCriteria)obj;
        
        ns3_myns3_dateTime__java_util_Calendar_DateTimeCalendar_Serializer.serialize(instance.getAdminModifiedAfter(), ns1_adminModifiedAfter_QNAME, null, writer, context);
        ns3_myns3_dateTime__java_util_Calendar_DateTimeCalendar_Serializer.serialize(instance.getAdminModifiedBefore(), ns1_adminModifiedBefore_QNAME, null, writer, context);
        ns3_myns3_string__java_lang_String_String_Serializer.serialize(instance.getCustomerGroup(), ns1_customerGroup_QNAME, null, writer, context);
        ns3_myns3_string__java_lang_String_String_Serializer.serialize(instance.getCustomerId(), ns1_customerId_QNAME, null, writer, context);
        ns3_myns3_dateTime__java_util_Calendar_DateTimeCalendar_Serializer.serialize(instance.getCustomerModifiedAfter(), ns1_customerModifiedAfter_QNAME, null, writer, context);
        ns3_myns3_dateTime__java_util_Calendar_DateTimeCalendar_Serializer.serialize(instance.getCustomerModifiedBefore(), ns1_customerModifiedBefore_QNAME, null, writer, context);
        ns3_myns3_dateTime__java_util_Calendar_DateTimeCalendar_Serializer.serialize(instance.getFirstVisitDateAfter(), ns1_firstVisitDateAfter_QNAME, null, writer, context);
        ns3_myns3_dateTime__java_util_Calendar_DateTimeCalendar_Serializer.serialize(instance.getFirstVisitDateBefore(), ns1_firstVisitDateBefore_QNAME, null, writer, context);
        ns3_myns3_string__java_lang_String_String_Serializer.serialize(instance.getIdGreaterThan(), ns1_idGreaterThan_QNAME, null, writer, context);
        ns2_myns2_ArrayOfstring__StringArray_SOAPSerializer1.serialize(instance.getIdIn(), ns1_idIn_QNAME, null, writer, context);
        ns3_myns3_string__java_lang_String_String_Serializer.serialize(instance.getIdLessThan(), ns1_idLessThan_QNAME, null, writer, context);
        ns3_myns3_dateTime__java_util_Calendar_DateTimeCalendar_Serializer.serialize(instance.getLastVisitDateAfter(), ns1_lastVisitDateAfter_QNAME, null, writer, context);
        ns3_myns3_dateTime__java_util_Calendar_DateTimeCalendar_Serializer.serialize(instance.getLastVisitDateBefore(), ns1_lastVisitDateBefore_QNAME, null, writer, context);
        ns3_myns3_string__java_lang_String_String_Serializer.serialize(instance.getModifyOperation(), ns1_modifyOperation_QNAME, null, writer, context);
        ns3_myns3_string__java_lang_String_String_Serializer.serialize(instance.getPrimaryCustomerGroup(), ns1_primaryCustomerGroup_QNAME, null, writer, context);
    }
}
