/* OpenSyncro - A web-based enterprise application integration tool
 * Copyright (C) 2008 Smilehouse Oy, support@opensyncro.org
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1, build R59)

package smilehouse.openinterface;

import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.util.exception.LocalizableExceptionAdapter;

public class OrderCriteria_SOAPBuilder implements SOAPInstanceBuilder {
    private smilehouse.openinterface.OrderCriteria _instance;
    private java.lang.String[] customerIdIn;
    private java.util.Calendar dateAfter;
    private java.util.Calendar dateBefore;
    private java.lang.String[] handlingStatusNameIn;
    private java.lang.String[] handlingStatusNameNotIn;
    private java.lang.Long idGreaterThan;
    private java.lang.Long[] idIn;
    private java.lang.Long idLessThan;
    private java.lang.String[] paymentStatusNameIn;
    private java.lang.String[] paymentStatusNameNotIn;
    private smilehouse.openinterface.OrderCriteriaSortRule[] sortRules;
    private java.lang.Double sumGreaterThan;
    private java.lang.Double sumLessThan;
    private static final int myCUSTOMERIDIN_INDEX = 0;
    private static final int myDATEAFTER_INDEX = 1;
    private static final int myDATEBEFORE_INDEX = 2;
    private static final int myHANDLINGSTATUSNAMEIN_INDEX = 3;
    private static final int myHANDLINGSTATUSNAMENOTIN_INDEX = 4;
    private static final int myIDGREATERTHAN_INDEX = 5;
    private static final int myIDIN_INDEX = 6;
    private static final int myIDLESSTHAN_INDEX = 7;
    private static final int myPAYMENTSTATUSNAMEIN_INDEX = 8;
    private static final int myPAYMENTSTATUSNAMENOTIN_INDEX = 9;
    private static final int mySORTRULES_INDEX = 10;
    private static final int mySUMGREATERTHAN_INDEX = 11;
    private static final int mySUMLESSTHAN_INDEX = 12;
    
    public OrderCriteria_SOAPBuilder() {
    }
    
    public void setCustomerIdIn(java.lang.String[] customerIdIn) {
        this.customerIdIn = customerIdIn;
    }
    
    public void setDateAfter(java.util.Calendar dateAfter) {
        this.dateAfter = dateAfter;
    }
    
    public void setDateBefore(java.util.Calendar dateBefore) {
        this.dateBefore = dateBefore;
    }
    
    public void setHandlingStatusNameIn(java.lang.String[] handlingStatusNameIn) {
        this.handlingStatusNameIn = handlingStatusNameIn;
    }
    
    public void setHandlingStatusNameNotIn(java.lang.String[] handlingStatusNameNotIn) {
        this.handlingStatusNameNotIn = handlingStatusNameNotIn;
    }
    
    public void setIdGreaterThan(java.lang.Long idGreaterThan) {
        this.idGreaterThan = idGreaterThan;
    }
    
    public void setIdIn(java.lang.Long[] idIn) {
        this.idIn = idIn;
    }
    
    public void setIdLessThan(java.lang.Long idLessThan) {
        this.idLessThan = idLessThan;
    }
    
    public void setPaymentStatusNameIn(java.lang.String[] paymentStatusNameIn) {
        this.paymentStatusNameIn = paymentStatusNameIn;
    }
    
    public void setPaymentStatusNameNotIn(java.lang.String[] paymentStatusNameNotIn) {
        this.paymentStatusNameNotIn = paymentStatusNameNotIn;
    }
    
    public void setSortRules(smilehouse.openinterface.OrderCriteriaSortRule[] sortRules) {
        this.sortRules = sortRules;
    }
    
    public void setSumGreaterThan(java.lang.Double sumGreaterThan) {
        this.sumGreaterThan = sumGreaterThan;
    }
    
    public void setSumLessThan(java.lang.Double sumLessThan) {
        this.sumLessThan = sumLessThan;
    }
    
    public int memberGateType(int memberIndex) {
        switch (memberIndex) {
            case myCUSTOMERIDIN_INDEX:
                return GATES_INITIALIZATION | REQUIRES_CREATION;
            case myHANDLINGSTATUSNAMEIN_INDEX:
                return GATES_INITIALIZATION | REQUIRES_CREATION;
            case myHANDLINGSTATUSNAMENOTIN_INDEX:
                return GATES_INITIALIZATION | REQUIRES_CREATION;
            case myIDGREATERTHAN_INDEX:
                return GATES_INITIALIZATION | REQUIRES_CREATION;
            case myIDIN_INDEX:
                return GATES_INITIALIZATION | REQUIRES_CREATION;
            case myIDLESSTHAN_INDEX:
                return GATES_INITIALIZATION | REQUIRES_CREATION;
            case myPAYMENTSTATUSNAMEIN_INDEX:
                return GATES_INITIALIZATION | REQUIRES_CREATION;
            case myPAYMENTSTATUSNAMENOTIN_INDEX:
                return GATES_INITIALIZATION | REQUIRES_CREATION;
            case mySORTRULES_INDEX:
                return GATES_INITIALIZATION | REQUIRES_CREATION;
            case mySUMGREATERTHAN_INDEX:
                return GATES_INITIALIZATION | REQUIRES_CREATION;
            case mySUMLESSTHAN_INDEX:
                return GATES_INITIALIZATION | REQUIRES_CREATION;
            default:
                throw new IllegalArgumentException();
        }
    }
    
    public void construct() {
    }
    
    public void setMember(int index, Object memberValue) {
        try {
            switch(index) {
                case myCUSTOMERIDIN_INDEX:
                    _instance.setCustomerIdIn((java.lang.String[])memberValue);
                    break;
                case myHANDLINGSTATUSNAMEIN_INDEX:
                    _instance.setHandlingStatusNameIn((java.lang.String[])memberValue);
                    break;
                case myHANDLINGSTATUSNAMENOTIN_INDEX:
                    _instance.setHandlingStatusNameNotIn((java.lang.String[])memberValue);
                    break;
                case myIDGREATERTHAN_INDEX:
                    _instance.setIdGreaterThan((java.lang.Long)memberValue);
                    break;
                case myIDIN_INDEX:
                    _instance.setIdIn((java.lang.Long[])memberValue);
                    break;
                case myIDLESSTHAN_INDEX:
                    _instance.setIdLessThan((java.lang.Long)memberValue);
                    break;
                case myPAYMENTSTATUSNAMEIN_INDEX:
                    _instance.setPaymentStatusNameIn((java.lang.String[])memberValue);
                    break;
                case myPAYMENTSTATUSNAMENOTIN_INDEX:
                    _instance.setPaymentStatusNameNotIn((java.lang.String[])memberValue);
                    break;
                case mySORTRULES_INDEX:
                    _instance.setSortRules((smilehouse.openinterface.OrderCriteriaSortRule[])memberValue);
                    break;
                case mySUMGREATERTHAN_INDEX:
                    _instance.setSumGreaterThan((java.lang.Double)memberValue);
                    break;
                case mySUMLESSTHAN_INDEX:
                    _instance.setSumLessThan((java.lang.Double)memberValue);
                    break;
                default:
                    throw new IllegalArgumentException();
            }
        }
        catch (RuntimeException e) {
            throw e;
        }
        catch (Exception e) {
            throw new DeserializationException(new LocalizableExceptionAdapter(e));
        }
    }
    
    public void initialize() {
    }
    
    public void setInstance(Object instance) {
        _instance = (smilehouse.openinterface.OrderCriteria)instance;
    }
    
    public Object getInstance() {
        return _instance;
    }
}
