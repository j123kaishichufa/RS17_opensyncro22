/* OpenSyncro - A web-based enterprise application integration tool
 * Copyright (C) 2008 Smilehouse Oy, support@opensyncro.org
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1, build R59)

package smilehouse.openinterface;

import com.sun.xml.rpc.client.BasicService;
import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.simpletype.*;
import com.sun.xml.rpc.encoding.soap.*;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.soap.SOAPVersion;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.rpc.*;
import javax.xml.rpc.encoding.*;
import javax.xml.namespace.QName;

public class OpenInterface_SerializerRegistry implements SerializerConstants {
    public OpenInterface_SerializerRegistry() {
    }
    
    public TypeMappingRegistry getRegistry() {
        
        TypeMappingRegistry registry = BasicService.createStandardTypeMappingRegistry();
        TypeMapping mapping12 = registry.getTypeMapping(SOAP12Constants.NS_SOAP_ENCODING);
        TypeMapping mapping = registry.getTypeMapping(SOAPConstants.NS_SOAP_ENCODING);
        TypeMapping mapping2 = registry.getTypeMapping("");
        {
            QName type = new QName("http://www.smilehouse.com/wsdl", "exportOrders");
            CombinedSerializer serializer = new smilehouse.openinterface.OpenInterfaceIF_exportOrders_RequestStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OpenInterfaceIF_exportOrders_RequestStruct.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/types", "OrderCriteriaSortRule");
            CombinedSerializer serializer = new smilehouse.openinterface.OrderCriteriaSortRule_SOAPSerializer(type,
                ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OrderCriteriaSortRule.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/wsdl", "importProducts");
            CombinedSerializer serializer = new smilehouse.openinterface.OpenInterfaceIF_importProducts_RequestStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OpenInterfaceIF_importProducts_RequestStruct.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/wsdl", "importOrdersResponse");
            CombinedSerializer serializer = new smilehouse.openinterface.OpenInterfaceIF_importOrders_ResponseStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OpenInterfaceIF_importOrders_ResponseStruct.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/types", "CustomerCriteria");
            CombinedSerializer serializer = new smilehouse.openinterface.CustomerCriteria_SOAPSerializer(type,
                ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.CustomerCriteria.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/wsdl", "getVersion");
            CombinedSerializer serializer = new smilehouse.openinterface.OpenInterfaceIF_getVersion_RequestStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OpenInterfaceIF_getVersion_RequestStruct.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/types", "IteratorClosedException");
            CombinedSerializer serializer = new smilehouse.openinterface.IteratorClosedException_SOAPSerializer(type,
                ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.IteratorClosedException.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/wsdl", "exportOrders2");
            CombinedSerializer serializer = new smilehouse.openinterface.OpenInterfaceIF_exportOrders2_RequestStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OpenInterfaceIF_exportOrders2_RequestStruct.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/wsdl", "iterate");
            CombinedSerializer serializer = new smilehouse.openinterface.OpenInterfaceIF_iterate_RequestStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OpenInterfaceIF_iterate_RequestStruct.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/wsdl", "exportOrderXMLResponse");
            CombinedSerializer serializer = new smilehouse.openinterface.OpenInterfaceIF_exportOrderXML_ResponseStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OpenInterfaceIF_exportOrderXML_ResponseStruct.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/types", "LoginInfo");
            CombinedSerializer serializer = new smilehouse.openinterface.LoginInfo_SOAPSerializer(type,
                ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.LoginInfo.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/types", "ArrayOfstring");
            QName elemName = new QName("", "item");
            CombinedSerializer serializer = new ObjectArraySerializer(type,
                ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING , 
                elemName, SchemaConstants.QNAME_TYPE_STRING, java.lang.String.class, 1, null, SOAPVersion.SOAP_11);
            serializer = new ReferenceableSerializerImpl(SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,java.lang.String[].class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/wsdl", "exportOrders2Response");
            CombinedSerializer serializer = new smilehouse.openinterface.OpenInterfaceIF_exportOrders2_ResponseStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OpenInterfaceIF_exportOrders2_ResponseStruct.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/types", "AccessDeniedException");
            CombinedSerializer serializer = new smilehouse.openinterface.AccessDeniedException_SOAPSerializer(type,
                ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.AccessDeniedException.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/wsdl", "invokeEventResponse");
            CombinedSerializer serializer = new smilehouse.openinterface.OpenInterfaceIF_invokeEvent_ResponseStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OpenInterfaceIF_invokeEvent_ResponseStruct.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/wsdl", "importCustomersResponse");
            CombinedSerializer serializer = new smilehouse.openinterface.OpenInterfaceIF_importCustomers_ResponseStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OpenInterfaceIF_importCustomers_ResponseStruct.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/types", "ExportResult");
            CombinedSerializer serializer = new smilehouse.openinterface.ExportResult_SOAPSerializer(type,
                ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.ExportResult.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/types", "ArrayOfLong");
            QName elemName = new QName("", "item");
            CombinedSerializer serializer = new ObjectArraySerializer(type,
                ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING , 
                elemName, SOAPConstants.QNAME_TYPE_LONG, java.lang.Long.class, 1, null, SOAPVersion.SOAP_11);
            serializer = new ReferenceableSerializerImpl(SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,java.lang.Long[].class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/types", "ImportResult");
            CombinedSerializer serializer = new smilehouse.openinterface.ImportResult_SOAPSerializer(type,
                ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.ImportResult.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/wsdl", "importPricelistResponse");
            CombinedSerializer serializer = new smilehouse.openinterface.OpenInterfaceIF_importPricelist_ResponseStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OpenInterfaceIF_importPricelist_ResponseStruct.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/wsdl", "iterateResponse");
            CombinedSerializer serializer = new smilehouse.openinterface.OpenInterfaceIF_iterate_ResponseStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OpenInterfaceIF_iterate_ResponseStruct.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/wsdl", "openHQLIterator");
            CombinedSerializer serializer = new smilehouse.openinterface.OpenInterfaceIF_openHQLIterator_RequestStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OpenInterfaceIF_openHQLIterator_RequestStruct.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/wsdl", "openHQLIteratorResponse");
            CombinedSerializer serializer = new smilehouse.openinterface.OpenInterfaceIF_openHQLIterator_ResponseStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OpenInterfaceIF_openHQLIterator_ResponseStruct.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/wsdl", "exportOrderXML");
            CombinedSerializer serializer = new smilehouse.openinterface.OpenInterfaceIF_exportOrderXML_RequestStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OpenInterfaceIF_exportOrderXML_RequestStruct.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/types", "OpenInterfaceException");
            CombinedSerializer serializer = new smilehouse.openinterface.OpenInterfaceException_InterfaceSOAPSerializer(type,
                ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OpenInterfaceException.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/wsdl", "invokeEvent");
            CombinedSerializer serializer = new smilehouse.openinterface.OpenInterfaceIF_invokeEvent_RequestStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OpenInterfaceIF_invokeEvent_RequestStruct.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/wsdl", "importPricelist");
            CombinedSerializer serializer = new smilehouse.openinterface.OpenInterfaceIF_importPricelist_RequestStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OpenInterfaceIF_importPricelist_RequestStruct.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/wsdl", "importProducts2Response");
            CombinedSerializer serializer = new smilehouse.openinterface.OpenInterfaceIF_importProducts2_ResponseStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OpenInterfaceIF_importProducts2_ResponseStruct.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/wsdl", "exportCustomersResponse");
            CombinedSerializer serializer = new smilehouse.openinterface.OpenInterfaceIF_exportCustomers_ResponseStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OpenInterfaceIF_exportCustomers_ResponseStruct.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/types", "OrderCriteria");
            CombinedSerializer serializer = new smilehouse.openinterface.OrderCriteria_SOAPSerializer(type,
                ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OrderCriteria.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/wsdl", "closeIterator");
            CombinedSerializer serializer = new smilehouse.openinterface.OpenInterfaceIF_closeIterator_RequestStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OpenInterfaceIF_closeIterator_RequestStruct.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/wsdl", "importProducts2");
            CombinedSerializer serializer = new smilehouse.openinterface.OpenInterfaceIF_importProducts2_RequestStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OpenInterfaceIF_importProducts2_RequestStruct.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/types", "ArrayOfOrderCriteriaSortRule");
            QName elemName = new QName("", "item");
            QName elemType = new QName("http://www.smilehouse.com/types", "OrderCriteriaSortRule");
            CombinedSerializer serializer = new ObjectArraySerializer(type,
                ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING , 
                elemName, elemType, smilehouse.openinterface.OrderCriteriaSortRule.class, 1, null, SOAPVersion.SOAP_11);
            serializer = new ReferenceableSerializerImpl(SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OrderCriteriaSortRule[].class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/wsdl", "exportOrdersResponse");
            CombinedSerializer serializer = new smilehouse.openinterface.OpenInterfaceIF_exportOrders_ResponseStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OpenInterfaceIF_exportOrders_ResponseStruct.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/wsdl", "importOrders");
            CombinedSerializer serializer = new smilehouse.openinterface.OpenInterfaceIF_importOrders_RequestStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OpenInterfaceIF_importOrders_RequestStruct.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/wsdl", "getVersionResponse");
            CombinedSerializer serializer = new smilehouse.openinterface.OpenInterfaceIF_getVersion_ResponseStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OpenInterfaceIF_getVersion_ResponseStruct.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/wsdl", "exportCustomers");
            CombinedSerializer serializer = new smilehouse.openinterface.OpenInterfaceIF_exportCustomers_RequestStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OpenInterfaceIF_exportCustomers_RequestStruct.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/wsdl", "importCustomers");
            CombinedSerializer serializer = new smilehouse.openinterface.OpenInterfaceIF_importCustomers_RequestStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OpenInterfaceIF_importCustomers_RequestStruct.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/wsdl", "importProductsResponse");
            CombinedSerializer serializer = new smilehouse.openinterface.OpenInterfaceIF_importProducts_ResponseStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OpenInterfaceIF_importProducts_ResponseStruct.class, type, serializer);
        }
        {
            QName type = new QName("http://www.smilehouse.com/wsdl", "closeIteratorResponse");
            CombinedSerializer serializer = new smilehouse.openinterface.OpenInterfaceIF_closeIterator_ResponseStruct_SOAPSerializer(type,
                DONT_ENCODE_TYPE, NULLABLE, SOAPConstants.NS_SOAP_ENCODING);
            serializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF, serializer, SOAPVersion.SOAP_11);
            registerSerializer(mapping,smilehouse.openinterface.OpenInterfaceIF_closeIterator_ResponseStruct.class, type, serializer);
        }
        return registry;
    }
    
    private static void registerSerializer(TypeMapping mapping, Class javaType, QName xmlType,
        Serializer ser) {
        mapping.register(javaType, xmlType, new SingletonSerializerFactory(ser),
            new SingletonDeserializerFactory((Deserializer)ser));
    }
    
}
