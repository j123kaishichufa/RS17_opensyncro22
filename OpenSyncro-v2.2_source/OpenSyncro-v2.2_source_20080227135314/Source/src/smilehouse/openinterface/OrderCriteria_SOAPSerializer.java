/* OpenSyncro - A web-based enterprise application integration tool
 * Copyright (C) 2008 Smilehouse Oy, support@opensyncro.org
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1, build R59)

package smilehouse.openinterface;

import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.literal.DetailFragmentDeserializer;
import com.sun.xml.rpc.encoding.simpletype.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.encoding.soap.SOAP12Constants;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;

public class OrderCriteria_SOAPSerializer extends ObjectSerializerBase implements Initializable {
    private static final QName ns1_customerIdIn_QNAME = new QName("", "customerIdIn");
    private static final QName ns2_ArrayOfstring_TYPE_QNAME = new QName("http://www.smilehouse.com/types", "ArrayOfstring");
    private CombinedSerializer ns2_myns2_ArrayOfstring__StringArray_SOAPSerializer1;
    private static final QName ns1_dateAfter_QNAME = new QName("", "dateAfter");
    private static final QName ns3_dateTime_TYPE_QNAME = SchemaConstants.QNAME_TYPE_DATE_TIME;
    private CombinedSerializer ns3_myns3_dateTime__java_util_Calendar_DateTimeCalendar_Serializer;
    private static final QName ns1_dateBefore_QNAME = new QName("", "dateBefore");
    private static final QName ns1_handlingStatusNameIn_QNAME = new QName("", "handlingStatusNameIn");
    private static final QName ns1_handlingStatusNameNotIn_QNAME = new QName("", "handlingStatusNameNotIn");
    private static final QName ns1_idGreaterThan_QNAME = new QName("", "idGreaterThan");
    private static final QName ns4_long_TYPE_QNAME = SOAPConstants.QNAME_TYPE_LONG;
    private CombinedSerializer ns4_myns4__long__java_lang_Long_Long_Serializer;
    private static final QName ns1_idIn_QNAME = new QName("", "idIn");
    private static final QName ns2_ArrayOfLong_TYPE_QNAME = new QName("http://www.smilehouse.com/types", "ArrayOfLong");
    private CombinedSerializer ns2_myns2_ArrayOfLong__LongArray_SOAPSerializer1;
    private static final QName ns1_idLessThan_QNAME = new QName("", "idLessThan");
    private static final QName ns1_paymentStatusNameIn_QNAME = new QName("", "paymentStatusNameIn");
    private static final QName ns1_paymentStatusNameNotIn_QNAME = new QName("", "paymentStatusNameNotIn");
    private static final QName ns1_sortRules_QNAME = new QName("", "sortRules");
    private static final QName ns2_ArrayOfOrderCriteriaSortRule_TYPE_QNAME = new QName("http://www.smilehouse.com/types", "ArrayOfOrderCriteriaSortRule");
    private CombinedSerializer ns2_myns2_ArrayOfOrderCriteriaSortRule__OrderCriteriaSortRuleArray_SOAPSerializer1;
    private static final QName ns1_sumGreaterThan_QNAME = new QName("", "sumGreaterThan");
    private static final QName ns4_double_TYPE_QNAME = SOAPConstants.QNAME_TYPE_DOUBLE;
    private CombinedSerializer ns4_myns4__double__java_lang_Double_Double_Serializer;
    private static final QName ns1_sumLessThan_QNAME = new QName("", "sumLessThan");
    private static final int myCUSTOMERIDIN_INDEX = 0;
    private static final int myDATEAFTER_INDEX = 1;
    private static final int myDATEBEFORE_INDEX = 2;
    private static final int myHANDLINGSTATUSNAMEIN_INDEX = 3;
    private static final int myHANDLINGSTATUSNAMENOTIN_INDEX = 4;
    private static final int myIDGREATERTHAN_INDEX = 5;
    private static final int myIDIN_INDEX = 6;
    private static final int myIDLESSTHAN_INDEX = 7;
    private static final int myPAYMENTSTATUSNAMEIN_INDEX = 8;
    private static final int myPAYMENTSTATUSNAMENOTIN_INDEX = 9;
    private static final int mySORTRULES_INDEX = 10;
    private static final int mySUMGREATERTHAN_INDEX = 11;
    private static final int mySUMLESSTHAN_INDEX = 12;
    
    public OrderCriteria_SOAPSerializer(QName type, boolean encodeType, boolean isNullable, String encodingStyle) {
        super(type, encodeType, isNullable, encodingStyle);
    }
    
    public void initialize(InternalTypeMappingRegistry registry) throws Exception {
        ns2_myns2_ArrayOfstring__StringArray_SOAPSerializer1 = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, java.lang.String[].class, ns2_ArrayOfstring_TYPE_QNAME);
        ns3_myns3_dateTime__java_util_Calendar_DateTimeCalendar_Serializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, java.util.Calendar.class, ns3_dateTime_TYPE_QNAME);
        ns4_myns4__long__java_lang_Long_Long_Serializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, java.lang.Long.class, ns4_long_TYPE_QNAME);
        ns2_myns2_ArrayOfLong__LongArray_SOAPSerializer1 = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, java.lang.Long[].class, ns2_ArrayOfLong_TYPE_QNAME);
        ns2_myns2_ArrayOfOrderCriteriaSortRule__OrderCriteriaSortRuleArray_SOAPSerializer1 = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.openinterface.OrderCriteriaSortRule[].class, ns2_ArrayOfOrderCriteriaSortRule_TYPE_QNAME);
        ns4_myns4__double__java_lang_Double_Double_Serializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, java.lang.Double.class, ns4_double_TYPE_QNAME);
    }
    
    public Object doDeserialize(SOAPDeserializationState state, XMLReader reader,
        SOAPDeserializationContext context) throws Exception {
        smilehouse.openinterface.OrderCriteria instance = new smilehouse.openinterface.OrderCriteria();
        smilehouse.openinterface.OrderCriteria_SOAPBuilder builder = null;
        Object member;
        boolean isComplete = true;
        QName elementName;
        
        reader.nextElementContent();
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_customerIdIn_QNAME)) {
                member = ns2_myns2_ArrayOfstring__StringArray_SOAPSerializer1.deserialize(ns1_customerIdIn_QNAME, reader, context);
                if (member instanceof SOAPDeserializationState) {
                    if (builder == null) {
                        builder = new smilehouse.openinterface.OrderCriteria_SOAPBuilder();
                    }
                    state = registerWithMemberState(instance, state, member, myCUSTOMERIDIN_INDEX, builder);
                    isComplete = false;
                } else {
                    instance.setCustomerIdIn((java.lang.String[])member);
                }
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_dateAfter_QNAME)) {
                member = ns3_myns3_dateTime__java_util_Calendar_DateTimeCalendar_Serializer.deserialize(ns1_dateAfter_QNAME, reader, context);
                instance.setDateAfter((java.util.Calendar)member);
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_dateBefore_QNAME)) {
                member = ns3_myns3_dateTime__java_util_Calendar_DateTimeCalendar_Serializer.deserialize(ns1_dateBefore_QNAME, reader, context);
                instance.setDateBefore((java.util.Calendar)member);
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_handlingStatusNameIn_QNAME)) {
                member = ns2_myns2_ArrayOfstring__StringArray_SOAPSerializer1.deserialize(ns1_handlingStatusNameIn_QNAME, reader, context);
                if (member instanceof SOAPDeserializationState) {
                    if (builder == null) {
                        builder = new smilehouse.openinterface.OrderCriteria_SOAPBuilder();
                    }
                    state = registerWithMemberState(instance, state, member, myHANDLINGSTATUSNAMEIN_INDEX, builder);
                    isComplete = false;
                } else {
                    instance.setHandlingStatusNameIn((java.lang.String[])member);
                }
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_handlingStatusNameNotIn_QNAME)) {
                member = ns2_myns2_ArrayOfstring__StringArray_SOAPSerializer1.deserialize(ns1_handlingStatusNameNotIn_QNAME, reader, context);
                if (member instanceof SOAPDeserializationState) {
                    if (builder == null) {
                        builder = new smilehouse.openinterface.OrderCriteria_SOAPBuilder();
                    }
                    state = registerWithMemberState(instance, state, member, myHANDLINGSTATUSNAMENOTIN_INDEX, builder);
                    isComplete = false;
                } else {
                    instance.setHandlingStatusNameNotIn((java.lang.String[])member);
                }
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_idGreaterThan_QNAME)) {
                member = ns4_myns4__long__java_lang_Long_Long_Serializer.deserialize(ns1_idGreaterThan_QNAME, reader, context);
                if (member instanceof SOAPDeserializationState) {
                    if (builder == null) {
                        builder = new smilehouse.openinterface.OrderCriteria_SOAPBuilder();
                    }
                    state = registerWithMemberState(instance, state, member, myIDGREATERTHAN_INDEX, builder);
                    isComplete = false;
                } else {
                    instance.setIdGreaterThan((java.lang.Long)member);
                }
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_idIn_QNAME)) {
                member = ns2_myns2_ArrayOfLong__LongArray_SOAPSerializer1.deserialize(ns1_idIn_QNAME, reader, context);
                if (member instanceof SOAPDeserializationState) {
                    if (builder == null) {
                        builder = new smilehouse.openinterface.OrderCriteria_SOAPBuilder();
                    }
                    state = registerWithMemberState(instance, state, member, myIDIN_INDEX, builder);
                    isComplete = false;
                } else {
                    instance.setIdIn((java.lang.Long[])member);
                }
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_idLessThan_QNAME)) {
                member = ns4_myns4__long__java_lang_Long_Long_Serializer.deserialize(ns1_idLessThan_QNAME, reader, context);
                if (member instanceof SOAPDeserializationState) {
                    if (builder == null) {
                        builder = new smilehouse.openinterface.OrderCriteria_SOAPBuilder();
                    }
                    state = registerWithMemberState(instance, state, member, myIDLESSTHAN_INDEX, builder);
                    isComplete = false;
                } else {
                    instance.setIdLessThan((java.lang.Long)member);
                }
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_paymentStatusNameIn_QNAME)) {
                member = ns2_myns2_ArrayOfstring__StringArray_SOAPSerializer1.deserialize(ns1_paymentStatusNameIn_QNAME, reader, context);
                if (member instanceof SOAPDeserializationState) {
                    if (builder == null) {
                        builder = new smilehouse.openinterface.OrderCriteria_SOAPBuilder();
                    }
                    state = registerWithMemberState(instance, state, member, myPAYMENTSTATUSNAMEIN_INDEX, builder);
                    isComplete = false;
                } else {
                    instance.setPaymentStatusNameIn((java.lang.String[])member);
                }
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_paymentStatusNameNotIn_QNAME)) {
                member = ns2_myns2_ArrayOfstring__StringArray_SOAPSerializer1.deserialize(ns1_paymentStatusNameNotIn_QNAME, reader, context);
                if (member instanceof SOAPDeserializationState) {
                    if (builder == null) {
                        builder = new smilehouse.openinterface.OrderCriteria_SOAPBuilder();
                    }
                    state = registerWithMemberState(instance, state, member, myPAYMENTSTATUSNAMENOTIN_INDEX, builder);
                    isComplete = false;
                } else {
                    instance.setPaymentStatusNameNotIn((java.lang.String[])member);
                }
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_sortRules_QNAME)) {
                member = ns2_myns2_ArrayOfOrderCriteriaSortRule__OrderCriteriaSortRuleArray_SOAPSerializer1.deserialize(ns1_sortRules_QNAME, reader, context);
                if (member instanceof SOAPDeserializationState) {
                    if (builder == null) {
                        builder = new smilehouse.openinterface.OrderCriteria_SOAPBuilder();
                    }
                    state = registerWithMemberState(instance, state, member, mySORTRULES_INDEX, builder);
                    isComplete = false;
                } else {
                    instance.setSortRules((smilehouse.openinterface.OrderCriteriaSortRule[])member);
                }
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_sumGreaterThan_QNAME)) {
                member = ns4_myns4__double__java_lang_Double_Double_Serializer.deserialize(ns1_sumGreaterThan_QNAME, reader, context);
                if (member instanceof SOAPDeserializationState) {
                    if (builder == null) {
                        builder = new smilehouse.openinterface.OrderCriteria_SOAPBuilder();
                    }
                    state = registerWithMemberState(instance, state, member, mySUMGREATERTHAN_INDEX, builder);
                    isComplete = false;
                } else {
                    instance.setSumGreaterThan((java.lang.Double)member);
                }
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_sumLessThan_QNAME)) {
                member = ns4_myns4__double__java_lang_Double_Double_Serializer.deserialize(ns1_sumLessThan_QNAME, reader, context);
                if (member instanceof SOAPDeserializationState) {
                    if (builder == null) {
                        builder = new smilehouse.openinterface.OrderCriteria_SOAPBuilder();
                    }
                    state = registerWithMemberState(instance, state, member, mySUMLESSTHAN_INDEX, builder);
                    isComplete = false;
                } else {
                    instance.setSumLessThan((java.lang.Double)member);
                }
                reader.nextElementContent();
            }
        }
        
        XMLReaderUtil.verifyReaderState(reader, XMLReader.END);
        return (isComplete ? (Object)instance : (Object)state);
    }
    
    public void doSerializeAttributes(Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        smilehouse.openinterface.OrderCriteria instance = (smilehouse.openinterface.OrderCriteria)obj;
        
    }
    
    public void doSerializeInstance(Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        smilehouse.openinterface.OrderCriteria instance = (smilehouse.openinterface.OrderCriteria)obj;
        
        ns2_myns2_ArrayOfstring__StringArray_SOAPSerializer1.serialize(instance.getCustomerIdIn(), ns1_customerIdIn_QNAME, null, writer, context);
        ns3_myns3_dateTime__java_util_Calendar_DateTimeCalendar_Serializer.serialize(instance.getDateAfter(), ns1_dateAfter_QNAME, null, writer, context);
        ns3_myns3_dateTime__java_util_Calendar_DateTimeCalendar_Serializer.serialize(instance.getDateBefore(), ns1_dateBefore_QNAME, null, writer, context);
        ns2_myns2_ArrayOfstring__StringArray_SOAPSerializer1.serialize(instance.getHandlingStatusNameIn(), ns1_handlingStatusNameIn_QNAME, null, writer, context);
        ns2_myns2_ArrayOfstring__StringArray_SOAPSerializer1.serialize(instance.getHandlingStatusNameNotIn(), ns1_handlingStatusNameNotIn_QNAME, null, writer, context);
        ns4_myns4__long__java_lang_Long_Long_Serializer.serialize(instance.getIdGreaterThan(), ns1_idGreaterThan_QNAME, null, writer, context);
        ns2_myns2_ArrayOfLong__LongArray_SOAPSerializer1.serialize(instance.getIdIn(), ns1_idIn_QNAME, null, writer, context);
        ns4_myns4__long__java_lang_Long_Long_Serializer.serialize(instance.getIdLessThan(), ns1_idLessThan_QNAME, null, writer, context);
        ns2_myns2_ArrayOfstring__StringArray_SOAPSerializer1.serialize(instance.getPaymentStatusNameIn(), ns1_paymentStatusNameIn_QNAME, null, writer, context);
        ns2_myns2_ArrayOfstring__StringArray_SOAPSerializer1.serialize(instance.getPaymentStatusNameNotIn(), ns1_paymentStatusNameNotIn_QNAME, null, writer, context);
        ns2_myns2_ArrayOfOrderCriteriaSortRule__OrderCriteriaSortRuleArray_SOAPSerializer1.serialize(instance.getSortRules(), ns1_sortRules_QNAME, null, writer, context);
        ns4_myns4__double__java_lang_Double_Double_Serializer.serialize(instance.getSumGreaterThan(), ns1_sumGreaterThan_QNAME, null, writer, context);
        ns4_myns4__double__java_lang_Double_Double_Serializer.serialize(instance.getSumLessThan(), ns1_sumLessThan_QNAME, null, writer, context);
    }
}
