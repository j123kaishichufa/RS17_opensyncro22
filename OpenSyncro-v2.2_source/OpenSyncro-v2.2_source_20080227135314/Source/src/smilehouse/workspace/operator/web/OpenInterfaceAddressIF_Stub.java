/* OpenSyncro - A web-based enterprise application integration tool
 * Copyright (C) 2008 Smilehouse Oy, support@opensyncro.org
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1, build R59)

package smilehouse.workspace.operator.web;

import com.sun.xml.rpc.server.http.MessageContextProperties;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.encoding.soap.SOAP12Constants;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.soap.streaming.*;
import com.sun.xml.rpc.soap.message.*;
import com.sun.xml.rpc.soap.SOAPVersion;
import com.sun.xml.rpc.soap.SOAPEncodingConstants;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;
import java.rmi.RemoteException;
import java.util.Iterator;
import java.lang.reflect.*;
import java.lang.Class;
import com.sun.xml.rpc.client.SenderException;
import com.sun.xml.rpc.client.*;
import com.sun.xml.rpc.client.http.*;
import javax.xml.rpc.handler.*;
import javax.xml.rpc.JAXRPCException;
import javax.xml.rpc.soap.SOAPFaultException;

public class OpenInterfaceAddressIF_Stub
    extends com.sun.xml.rpc.client.StubBase
    implements smilehouse.workspace.operator.web.OpenInterfaceAddressIF {
    
    
    /*
     *  public constructor
     */
    public OpenInterfaceAddressIF_Stub(HandlerChain handlerChain) {
        super(handlerChain);
        _setProperty(ENDPOINT_ADDRESS_PROPERTY, "REPLACE_WITH_ACTUAL_URL");
    }
    
    
    /*
     *  implementation of getOpenInterfaceAddress
     */
    public java.lang.String getOpenInterfaceAddress(java.lang.String string_1)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getOpenInterfaceAddress_OPCODE);
            smilehouse.workspace.operator.web.OpenInterfaceAddressIF_getOpenInterfaceAddress_RequestStruct _myOpenInterfaceAddressIF_getOpenInterfaceAddress_RequestStruct =
                new smilehouse.workspace.operator.web.OpenInterfaceAddressIF_getOpenInterfaceAddress_RequestStruct();
            
            _myOpenInterfaceAddressIF_getOpenInterfaceAddress_RequestStruct.setString_1(string_1);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getOpenInterfaceAddress_getOpenInterfaceAddress_QNAME);
            _bodyBlock.setValue(_myOpenInterfaceAddressIF_getOpenInterfaceAddress_RequestStruct);
            _bodyBlock.setSerializer(ns1_myOpenInterfaceAddressIF_getOpenInterfaceAddress_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            smilehouse.workspace.operator.web.OpenInterfaceAddressIF_getOpenInterfaceAddress_ResponseStruct _myOpenInterfaceAddressIF_getOpenInterfaceAddress_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myOpenInterfaceAddressIF_getOpenInterfaceAddress_ResponseStruct =
                    (smilehouse.workspace.operator.web.OpenInterfaceAddressIF_getOpenInterfaceAddress_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myOpenInterfaceAddressIF_getOpenInterfaceAddress_ResponseStruct =
                    (smilehouse.workspace.operator.web.OpenInterfaceAddressIF_getOpenInterfaceAddress_ResponseStruct)_responseObj;
            }
            
            return _myOpenInterfaceAddressIF_getOpenInterfaceAddress_ResponseStruct.getResult();
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    
    /*
     *  this method deserializes the request/response structure in the body
     */
    protected void _readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState  state) throws Exception {
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case getOpenInterfaceAddress_OPCODE:
                _deserialize_getOpenInterfaceAddress(bodyReader, deserializationContext, state);
                break;
            default:
                throw new SenderException("sender.response.unrecognizedOperation", Integer.toString(opcode));
        }
    }
    
    
    
    /*
     * This method deserializes the body of the getOpenInterfaceAddress operation.
     */
    private void _deserialize_getOpenInterfaceAddress(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myOpenInterfaceAddressIF_getOpenInterfaceAddress_ResponseStructObj =
            ns1_myOpenInterfaceAddressIF_getOpenInterfaceAddress_ResponseStruct_SOAPSerializer.deserialize(ns1_getOpenInterfaceAddress_getOpenInterfaceAddressResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getOpenInterfaceAddress_getOpenInterfaceAddressResponse_QNAME);
        bodyBlock.setValue(myOpenInterfaceAddressIF_getOpenInterfaceAddress_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    
    
    public String _getDefaultEnvelopeEncodingStyle() {
        return SOAPNamespaceConstants.ENCODING;
    }
    
    public String _getImplicitEnvelopeEncodingStyle() {
        return "";
    }
    
    public String _getEncodingStyle() {
        return SOAPNamespaceConstants.ENCODING;
    }
    
    public void _setEncodingStyle(String encodingStyle) {
        throw new UnsupportedOperationException("cannot set encoding style");
    }
    
    
    
    
    
    /*
     * This method returns an array containing (prefix, nsURI) pairs.
     */
    protected String[] _getNamespaceDeclarations() {
        return myNamespace_declarations;
    }
    
    /*
     * This method returns an array containing the names of the headers we understand.
     */
    public QName[] _getUnderstoodHeaders() {
        return understoodHeaderNames;
    }
    
    public void _initialize(InternalTypeMappingRegistry registry) throws Exception {
        super._initialize(registry);
        ns1_myOpenInterfaceAddressIF_getOpenInterfaceAddress_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.workspace.operator.web.OpenInterfaceAddressIF_getOpenInterfaceAddress_ResponseStruct.class, ns1_getOpenInterfaceAddressResponse_TYPE_QNAME);
        ns1_myOpenInterfaceAddressIF_getOpenInterfaceAddress_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, smilehouse.workspace.operator.web.OpenInterfaceAddressIF_getOpenInterfaceAddress_RequestStruct.class, ns1_getOpenInterfaceAddress_TYPE_QNAME);
    }
    
    private static final QName _portName = new QName("http://www.smilehouse.com/wsdl", "OpenInterfaceAddressIFPort");
    private static final int getOpenInterfaceAddress_OPCODE = 0;
    private static final QName ns1_getOpenInterfaceAddress_getOpenInterfaceAddress_QNAME = new QName("http://www.smilehouse.com/wsdl", "getOpenInterfaceAddress");
    private static final QName ns1_getOpenInterfaceAddress_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "getOpenInterfaceAddress");
    private CombinedSerializer ns1_myOpenInterfaceAddressIF_getOpenInterfaceAddress_RequestStruct_SOAPSerializer;
    private static final QName ns1_getOpenInterfaceAddress_getOpenInterfaceAddressResponse_QNAME = new QName("http://www.smilehouse.com/wsdl", "getOpenInterfaceAddressResponse");
    private static final QName ns1_getOpenInterfaceAddressResponse_TYPE_QNAME = new QName("http://www.smilehouse.com/wsdl", "getOpenInterfaceAddressResponse");
    private CombinedSerializer ns1_myOpenInterfaceAddressIF_getOpenInterfaceAddress_ResponseStruct_SOAPSerializer;
    private static final String[] myNamespace_declarations =
                                        new String[] {
                                            "ns0", "http://www.smilehouse.com/wsdl"
                                        };
    
    private static final QName[] understoodHeaderNames = new QName[] {  };
}
