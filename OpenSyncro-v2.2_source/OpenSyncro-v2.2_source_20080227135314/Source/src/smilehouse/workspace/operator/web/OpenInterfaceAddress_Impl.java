/* OpenSyncro - A web-based enterprise application integration tool
 * Copyright (C) 2008 Smilehouse Oy, support@opensyncro.org
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1, build R59)

package smilehouse.workspace.operator.web;

import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.client.ServiceExceptionImpl;
import com.sun.xml.rpc.util.exception.*;
import com.sun.xml.rpc.soap.SOAPVersion;
import com.sun.xml.rpc.client.HandlerChainImpl;
import javax.xml.rpc.*;
import javax.xml.rpc.encoding.*;
import javax.xml.rpc.handler.HandlerChain;
import javax.xml.rpc.handler.HandlerInfo;
import javax.xml.namespace.QName;

public class OpenInterfaceAddress_Impl extends com.sun.xml.rpc.client.BasicService implements OpenInterfaceAddress {
    private static final QName serviceName = new QName("http://www.smilehouse.com/wsdl", "OpenInterfaceAddress");
    private static final QName ns1_OpenInterfaceAddressIFPort_QNAME = new QName("http://www.smilehouse.com/wsdl", "OpenInterfaceAddressIFPort");
    private static final Class openInterfaceAddressIF_PortClass = smilehouse.workspace.operator.web.OpenInterfaceAddressIF.class;
    
    public OpenInterfaceAddress_Impl() {
        super(serviceName, new QName[] {
                        ns1_OpenInterfaceAddressIFPort_QNAME
                    },
            new smilehouse.workspace.operator.web.OpenInterfaceAddress_SerializerRegistry().getRegistry());
        
    }
    
    public java.rmi.Remote getPort(QName portName, Class serviceDefInterface) throws javax.xml.rpc.ServiceException {
        try {
            if (portName.equals(ns1_OpenInterfaceAddressIFPort_QNAME) &&
                serviceDefInterface.equals(openInterfaceAddressIF_PortClass)) {
                return getOpenInterfaceAddressIFPort();
            }
        } catch (Exception e) {
            throw new ServiceExceptionImpl(new LocalizableExceptionAdapter(e));
        }
        return super.getPort(portName, serviceDefInterface);
    }
    
    public java.rmi.Remote getPort(Class serviceDefInterface) throws javax.xml.rpc.ServiceException {
        try {
            if (serviceDefInterface.equals(openInterfaceAddressIF_PortClass)) {
                return getOpenInterfaceAddressIFPort();
            }
        } catch (Exception e) {
            throw new ServiceExceptionImpl(new LocalizableExceptionAdapter(e));
        }
        return super.getPort(serviceDefInterface);
    }
    
    public smilehouse.workspace.operator.web.OpenInterfaceAddressIF getOpenInterfaceAddressIFPort() {
        String[] roles = new String[] {};
        HandlerChainImpl handlerChain = new HandlerChainImpl(getHandlerRegistry().getHandlerChain(ns1_OpenInterfaceAddressIFPort_QNAME));
        handlerChain.setRoles(roles);
        smilehouse.workspace.operator.web.OpenInterfaceAddressIF_Stub stub = new smilehouse.workspace.operator.web.OpenInterfaceAddressIF_Stub(handlerChain);
        try {
            stub._initialize(super.internalTypeRegistry);
        } catch (JAXRPCException e) {
            throw e;
        } catch (Exception e) {
            throw new JAXRPCException(e.getMessage(), e);
        }
        return stub;
    }
}
